/*
Appgate SDP Controller REST API

# About   This specification documents the REST API calls for the Appgate SDP Controller.    Please refer to the REST API chapter in the manual or contact Appgate support with any questions about   this functionality. # Getting Started   Requirements for API scripting:   - Access to the Admin/API TLS Connection (default port 8443) of a Controller appliance.     (https://sdphelp.appgate.com/adminguide/appliance-function-configure.html?anchor=admin-api)   - An API user with relevant permissions.     (https://sdphelp.appgate.com/adminguide/administrative-roles-configure.html)   - In order to use the simple login API, Admin MFA must be disabled or the API user must be excluded.     (https://sdphelp.appgate.com/adminguide/mfa-for-admins.html) # Base path   HTTPS requests must be sent to the Admin Interface hostname and port, with **_/admin** path.    For example: **https://appgate.company.com:8443/admin**    All requests must have the **Accept** header as:    **application/vnd.appgate.peer-v21+json**    An exception is made for the **_/admin/version** endpoint which instead expects an **application/json** Accept header. # API Conventions   API conventions are  important to understand and follow strictly.    - While updating objects (via PUT), entire object must be sent with all fields.     - For example, in order to add a remedy method to the condition below:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": []       }       ```     - send the entire object with updated and non-updated fields:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": [{\"type\": \"DisplayMessage\", \"message\": \"test message\"}]       }       ```    - In case Controller returns an error (non-2xx HTTP status code), response body is JSON.     The \"message\" field contains information about the error.     HTTP 422 \"Unprocessable Entity\" has extra `errors` field to list all the issues with specific fields.    - Empty string (\"\") is considered a different value than \"null\" or field being omitted from JSON.     Omitting the field is recommended if no value is intended.     Empty string (\"\") will be almost always rejected as invalid value.    - There are common pattern between many objects:     - **Configuration Objects**: There are many objects with common fields, namely \"id\", \"name\", \"notes\", \"created\"       and \"updated\". These entities are listed, queried, created, updated and deleted in a similar fashion.     - **Distinguished Name**: Users and Devices are identified with what is called Distinguished Names, as used in        LDAP. The distinguished format that identifies a device and a user combination is        \"CN=\\<Device ID\\>,CN=\\<username\\>,OU=\\<Identity Provider Name\\>\". Some objects have the        \"userDistinguishedName\" field, which does not include the CN for Device ID.        This identifies a user on every device.

API version: API version 21.1
Contact: appgatesdp.support@appgate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// UnhealthyApp Represents an unhealthy app on a specific Gateway.
type UnhealthyApp struct {
	// ID of the Entitlement.
	Entitlement *string `json:"entitlement,omitempty"`
	// Name of the Entitlement.
	EntitlementName *string `json:"entitlementName,omitempty"`
	// Total report count for the Entitlement.
	ReportCount *int32 `json:"reportCount,omitempty"`
	// Total user count affected by the unhealthy app.
	UserCount *int32 `json:"userCount,omitempty"`
	// ID of the Site.
	Site *string `json:"site,omitempty"`
	// Name of the Site.
	SiteName *string `json:"siteName,omitempty"`
	// ID of the reporting Gateway Appliance.
	Appliance *string `json:"appliance,omitempty"`
	// Name of the Gateway Appliance.
	GatewayName *string `json:"gatewayName,omitempty"`
	// The total amount of Gateways reporting this Entitlement as unhealthy.
	GatewaysReportingCount *int32 `json:"gatewaysReportingCount,omitempty"`
	// The total amount of active Gateways in the Site.
	GatewayCountInSite *int32 `json:"gatewayCountInSite,omitempty"`
	// Timestamp of the last time the Entitlement was reported unhealthy.
	LastReported *time.Time `json:"lastReported,omitempty"`
	// Specific actions being reported unhealthy and its details.
	Actions []UnhealthyAppActionsInner `json:"actions,omitempty"`
}

// NewUnhealthyApp instantiates a new UnhealthyApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnhealthyApp() *UnhealthyApp {
	this := UnhealthyApp{}
	return &this
}

// NewUnhealthyAppWithDefaults instantiates a new UnhealthyApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnhealthyAppWithDefaults() *UnhealthyApp {
	this := UnhealthyApp{}
	return &this
}

// GetEntitlement returns the Entitlement field value if set, zero value otherwise.
func (o *UnhealthyApp) GetEntitlement() string {
	if o == nil || o.Entitlement == nil {
		var ret string
		return ret
	}
	return *o.Entitlement
}

// GetEntitlementOk returns a tuple with the Entitlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetEntitlementOk() (*string, bool) {
	if o == nil || o.Entitlement == nil {
		return nil, false
	}
	return o.Entitlement, true
}

// HasEntitlement returns a boolean if a field has been set.
func (o *UnhealthyApp) HasEntitlement() bool {
	if o != nil && o.Entitlement != nil {
		return true
	}

	return false
}

// SetEntitlement gets a reference to the given string and assigns it to the Entitlement field.
func (o *UnhealthyApp) SetEntitlement(v string) {
	o.Entitlement = &v
}

// GetEntitlementName returns the EntitlementName field value if set, zero value otherwise.
func (o *UnhealthyApp) GetEntitlementName() string {
	if o == nil || o.EntitlementName == nil {
		var ret string
		return ret
	}
	return *o.EntitlementName
}

// GetEntitlementNameOk returns a tuple with the EntitlementName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetEntitlementNameOk() (*string, bool) {
	if o == nil || o.EntitlementName == nil {
		return nil, false
	}
	return o.EntitlementName, true
}

// HasEntitlementName returns a boolean if a field has been set.
func (o *UnhealthyApp) HasEntitlementName() bool {
	if o != nil && o.EntitlementName != nil {
		return true
	}

	return false
}

// SetEntitlementName gets a reference to the given string and assigns it to the EntitlementName field.
func (o *UnhealthyApp) SetEntitlementName(v string) {
	o.EntitlementName = &v
}

// GetReportCount returns the ReportCount field value if set, zero value otherwise.
func (o *UnhealthyApp) GetReportCount() int32 {
	if o == nil || o.ReportCount == nil {
		var ret int32
		return ret
	}
	return *o.ReportCount
}

// GetReportCountOk returns a tuple with the ReportCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetReportCountOk() (*int32, bool) {
	if o == nil || o.ReportCount == nil {
		return nil, false
	}
	return o.ReportCount, true
}

// HasReportCount returns a boolean if a field has been set.
func (o *UnhealthyApp) HasReportCount() bool {
	if o != nil && o.ReportCount != nil {
		return true
	}

	return false
}

// SetReportCount gets a reference to the given int32 and assigns it to the ReportCount field.
func (o *UnhealthyApp) SetReportCount(v int32) {
	o.ReportCount = &v
}

// GetUserCount returns the UserCount field value if set, zero value otherwise.
func (o *UnhealthyApp) GetUserCount() int32 {
	if o == nil || o.UserCount == nil {
		var ret int32
		return ret
	}
	return *o.UserCount
}

// GetUserCountOk returns a tuple with the UserCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetUserCountOk() (*int32, bool) {
	if o == nil || o.UserCount == nil {
		return nil, false
	}
	return o.UserCount, true
}

// HasUserCount returns a boolean if a field has been set.
func (o *UnhealthyApp) HasUserCount() bool {
	if o != nil && o.UserCount != nil {
		return true
	}

	return false
}

// SetUserCount gets a reference to the given int32 and assigns it to the UserCount field.
func (o *UnhealthyApp) SetUserCount(v int32) {
	o.UserCount = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *UnhealthyApp) GetSite() string {
	if o == nil || o.Site == nil {
		var ret string
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetSiteOk() (*string, bool) {
	if o == nil || o.Site == nil {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *UnhealthyApp) HasSite() bool {
	if o != nil && o.Site != nil {
		return true
	}

	return false
}

// SetSite gets a reference to the given string and assigns it to the Site field.
func (o *UnhealthyApp) SetSite(v string) {
	o.Site = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *UnhealthyApp) GetSiteName() string {
	if o == nil || o.SiteName == nil {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetSiteNameOk() (*string, bool) {
	if o == nil || o.SiteName == nil {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *UnhealthyApp) HasSiteName() bool {
	if o != nil && o.SiteName != nil {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *UnhealthyApp) SetSiteName(v string) {
	o.SiteName = &v
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *UnhealthyApp) GetAppliance() string {
	if o == nil || o.Appliance == nil {
		var ret string
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetApplianceOk() (*string, bool) {
	if o == nil || o.Appliance == nil {
		return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *UnhealthyApp) HasAppliance() bool {
	if o != nil && o.Appliance != nil {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given string and assigns it to the Appliance field.
func (o *UnhealthyApp) SetAppliance(v string) {
	o.Appliance = &v
}

// GetGatewayName returns the GatewayName field value if set, zero value otherwise.
func (o *UnhealthyApp) GetGatewayName() string {
	if o == nil || o.GatewayName == nil {
		var ret string
		return ret
	}
	return *o.GatewayName
}

// GetGatewayNameOk returns a tuple with the GatewayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetGatewayNameOk() (*string, bool) {
	if o == nil || o.GatewayName == nil {
		return nil, false
	}
	return o.GatewayName, true
}

// HasGatewayName returns a boolean if a field has been set.
func (o *UnhealthyApp) HasGatewayName() bool {
	if o != nil && o.GatewayName != nil {
		return true
	}

	return false
}

// SetGatewayName gets a reference to the given string and assigns it to the GatewayName field.
func (o *UnhealthyApp) SetGatewayName(v string) {
	o.GatewayName = &v
}

// GetGatewaysReportingCount returns the GatewaysReportingCount field value if set, zero value otherwise.
func (o *UnhealthyApp) GetGatewaysReportingCount() int32 {
	if o == nil || o.GatewaysReportingCount == nil {
		var ret int32
		return ret
	}
	return *o.GatewaysReportingCount
}

// GetGatewaysReportingCountOk returns a tuple with the GatewaysReportingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetGatewaysReportingCountOk() (*int32, bool) {
	if o == nil || o.GatewaysReportingCount == nil {
		return nil, false
	}
	return o.GatewaysReportingCount, true
}

// HasGatewaysReportingCount returns a boolean if a field has been set.
func (o *UnhealthyApp) HasGatewaysReportingCount() bool {
	if o != nil && o.GatewaysReportingCount != nil {
		return true
	}

	return false
}

// SetGatewaysReportingCount gets a reference to the given int32 and assigns it to the GatewaysReportingCount field.
func (o *UnhealthyApp) SetGatewaysReportingCount(v int32) {
	o.GatewaysReportingCount = &v
}

// GetGatewayCountInSite returns the GatewayCountInSite field value if set, zero value otherwise.
func (o *UnhealthyApp) GetGatewayCountInSite() int32 {
	if o == nil || o.GatewayCountInSite == nil {
		var ret int32
		return ret
	}
	return *o.GatewayCountInSite
}

// GetGatewayCountInSiteOk returns a tuple with the GatewayCountInSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetGatewayCountInSiteOk() (*int32, bool) {
	if o == nil || o.GatewayCountInSite == nil {
		return nil, false
	}
	return o.GatewayCountInSite, true
}

// HasGatewayCountInSite returns a boolean if a field has been set.
func (o *UnhealthyApp) HasGatewayCountInSite() bool {
	if o != nil && o.GatewayCountInSite != nil {
		return true
	}

	return false
}

// SetGatewayCountInSite gets a reference to the given int32 and assigns it to the GatewayCountInSite field.
func (o *UnhealthyApp) SetGatewayCountInSite(v int32) {
	o.GatewayCountInSite = &v
}

// GetLastReported returns the LastReported field value if set, zero value otherwise.
func (o *UnhealthyApp) GetLastReported() time.Time {
	if o == nil || o.LastReported == nil {
		var ret time.Time
		return ret
	}
	return *o.LastReported
}

// GetLastReportedOk returns a tuple with the LastReported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetLastReportedOk() (*time.Time, bool) {
	if o == nil || o.LastReported == nil {
		return nil, false
	}
	return o.LastReported, true
}

// HasLastReported returns a boolean if a field has been set.
func (o *UnhealthyApp) HasLastReported() bool {
	if o != nil && o.LastReported != nil {
		return true
	}

	return false
}

// SetLastReported gets a reference to the given time.Time and assigns it to the LastReported field.
func (o *UnhealthyApp) SetLastReported(v time.Time) {
	o.LastReported = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *UnhealthyApp) GetActions() []UnhealthyAppActionsInner {
	if o == nil || o.Actions == nil {
		var ret []UnhealthyAppActionsInner
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnhealthyApp) GetActionsOk() ([]UnhealthyAppActionsInner, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *UnhealthyApp) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []UnhealthyAppActionsInner and assigns it to the Actions field.
func (o *UnhealthyApp) SetActions(v []UnhealthyAppActionsInner) {
	o.Actions = v
}

func (o UnhealthyApp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Entitlement != nil {
		toSerialize["entitlement"] = o.Entitlement
	}
	if o.EntitlementName != nil {
		toSerialize["entitlementName"] = o.EntitlementName
	}
	if o.ReportCount != nil {
		toSerialize["reportCount"] = o.ReportCount
	}
	if o.UserCount != nil {
		toSerialize["userCount"] = o.UserCount
	}
	if o.Site != nil {
		toSerialize["site"] = o.Site
	}
	if o.SiteName != nil {
		toSerialize["siteName"] = o.SiteName
	}
	if o.Appliance != nil {
		toSerialize["appliance"] = o.Appliance
	}
	if o.GatewayName != nil {
		toSerialize["gatewayName"] = o.GatewayName
	}
	if o.GatewaysReportingCount != nil {
		toSerialize["gatewaysReportingCount"] = o.GatewaysReportingCount
	}
	if o.GatewayCountInSite != nil {
		toSerialize["gatewayCountInSite"] = o.GatewayCountInSite
	}
	if o.LastReported != nil {
		toSerialize["lastReported"] = o.LastReported
	}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	return json.Marshal(toSerialize)
}

type NullableUnhealthyApp struct {
	value *UnhealthyApp
	isSet bool
}

func (v NullableUnhealthyApp) Get() *UnhealthyApp {
	return v.value
}

func (v *NullableUnhealthyApp) Set(val *UnhealthyApp) {
	v.value = val
	v.isSet = true
}

func (v NullableUnhealthyApp) IsSet() bool {
	return v.isSet
}

func (v *NullableUnhealthyApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnhealthyApp(val *UnhealthyApp) *NullableUnhealthyApp {
	return &NullableUnhealthyApp{value: val, isSet: true}
}

func (v NullableUnhealthyApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnhealthyApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
