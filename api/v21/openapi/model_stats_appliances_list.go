/*
Appgate SDP Controller REST API

# About   This specification documents the REST API calls for the Appgate SDP Controller.    Please refer to the REST API chapter in the manual or contact Appgate support with any questions about   this functionality. # Getting Started   Requirements for API scripting:   - Access to the Admin/API TLS Connection (default port 8443) of a Controller appliance.     (https://sdphelp.appgate.com/adminguide/appliance-function-configure.html?anchor=admin-api)   - An API user with relevant permissions.     (https://sdphelp.appgate.com/adminguide/administrative-roles-configure.html)   - In order to use the simple login API, Admin MFA must be disabled or the API user must be excluded.     (https://sdphelp.appgate.com/adminguide/mfa-for-admins.html) # Base path   HTTPS requests must be sent to the Admin Interface hostname and port, with **_/admin** path.    For example: **https://appgate.company.com:8443/admin**    All requests must have the **Accept** header as:    **application/vnd.appgate.peer-v21+json**    An exception is made for the **_/admin/version** endpoint which instead expects an **application/json** Accept header. # API Conventions   API conventions are  important to understand and follow strictly.    - While updating objects (via PUT), entire object must be sent with all fields.     - For example, in order to add a remedy method to the condition below:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": []       }       ```     - send the entire object with updated and non-updated fields:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": [{\"type\": \"DisplayMessage\", \"message\": \"test message\"}]       }       ```    - In case Controller returns an error (non-2xx HTTP status code), response body is JSON.     The \"message\" field contains information about the error.     HTTP 422 \"Unprocessable Entity\" has extra `errors` field to list all the issues with specific fields.    - Empty string (\"\") is considered a different value than \"null\" or field being omitted from JSON.     Omitting the field is recommended if no value is intended.     Empty string (\"\") will be almost always rejected as invalid value.    - There are common pattern between many objects:     - **Configuration Objects**: There are many objects with common fields, namely \"id\", \"name\", \"notes\", \"created\"       and \"updated\". These entities are listed, queried, created, updated and deleted in a similar fashion.     - **Distinguished Name**: Users and Devices are identified with what is called Distinguished Names, as used in        LDAP. The distinguished format that identifies a device and a user combination is        \"CN=\\<Device ID\\>,CN=\\<username\\>,OU=\\<Identity Provider Name\\>\". Some objects have the        \"userDistinguishedName\" field, which does not include the CN for Device ID.        This identifies a user on every device.

API version: API version 21.1
Contact: appgatesdp.support@appgate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// StatsAppliancesList struct for StatsAppliancesList
type StatsAppliancesList struct {
	// User-friendly name for the stats. Deprecated as of 6.4
	// Deprecated
	Name *string `json:"name,omitempty"`
	// The time the stats was generated. Deprecated as of 6.4
	// Deprecated
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// Recommended refresh interval in minutes. Deprecated as of 6.4
	// Deprecated
	RefreshInterval *float32 `json:"refreshInterval,omitempty"`
	// The range applied to the list. Format: -/. 3-5/8 means, out of 8 count (query affects the total), the items between (including) the 3rd and the 5th are returned.
	Range *string `json:"range,omitempty"`
	// The field name used to sort the list.
	OrderBy *string `json:"orderBy,omitempty"`
	// Whether the sorting is applied descending or ascending.
	Descending *bool `json:"descending,omitempty"`
	// The queries applied to the list.
	Queries []string `json:"queries,omitempty"`
	// The filters applied to the list.
	FilterBy []FilterBy `json:"filterBy,omitempty"`
	// The number of active Appliances with the Controller role enabled.
	ControllerCount *float32 `json:"controllerCount,omitempty"`
	// The number of active Appliances with the Gateway role enabled.
	GatewayCount *float32 `json:"gatewayCount,omitempty"`
	// The number of active Appliances in total.
	ApplianceCount *float32 `json:"applianceCount,omitempty"`
	// The number of active Appliances with the LogServer role enabled.
	LogServerCount *float32 `json:"logServerCount,omitempty"`
	// The number of active Appliances with the LogForwarder role enabled.
	LogForwarderCount *float32 `json:"logForwarderCount,omitempty"`
	// The number of active Appliances with the Connector role enabled.
	ConnectorCount *float32 `json:"connectorCount,omitempty"`
	// The number of active Appliances with the Portal role enabled.
	PortalCount *float32                       `json:"portalCount,omitempty"`
	Data        []StatsAppliancesListAllOfData `json:"data,omitempty"`
}

// NewStatsAppliancesList instantiates a new StatsAppliancesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatsAppliancesList() *StatsAppliancesList {
	this := StatsAppliancesList{}
	return &this
}

// NewStatsAppliancesListWithDefaults instantiates a new StatsAppliancesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsAppliancesListWithDefaults() *StatsAppliancesList {
	this := StatsAppliancesList{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
// Deprecated
func (o *StatsAppliancesList) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *StatsAppliancesList) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
// Deprecated
func (o *StatsAppliancesList) SetName(v string) {
	o.Name = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
// Deprecated
func (o *StatsAppliancesList) GetCreationDate() time.Time {
	if o == nil || o.CreationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *StatsAppliancesList) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
// Deprecated
func (o *StatsAppliancesList) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetRefreshInterval returns the RefreshInterval field value if set, zero value otherwise.
// Deprecated
func (o *StatsAppliancesList) GetRefreshInterval() float32 {
	if o == nil || o.RefreshInterval == nil {
		var ret float32
		return ret
	}
	return *o.RefreshInterval
}

// GetRefreshIntervalOk returns a tuple with the RefreshInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *StatsAppliancesList) GetRefreshIntervalOk() (*float32, bool) {
	if o == nil || o.RefreshInterval == nil {
		return nil, false
	}
	return o.RefreshInterval, true
}

// HasRefreshInterval returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasRefreshInterval() bool {
	if o != nil && o.RefreshInterval != nil {
		return true
	}

	return false
}

// SetRefreshInterval gets a reference to the given float32 and assigns it to the RefreshInterval field.
// Deprecated
func (o *StatsAppliancesList) SetRefreshInterval(v float32) {
	o.RefreshInterval = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetRange() string {
	if o == nil || o.Range == nil {
		var ret string
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetRangeOk() (*string, bool) {
	if o == nil || o.Range == nil {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasRange() bool {
	if o != nil && o.Range != nil {
		return true
	}

	return false
}

// SetRange gets a reference to the given string and assigns it to the Range field.
func (o *StatsAppliancesList) SetRange(v string) {
	o.Range = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetOrderBy() string {
	if o == nil || o.OrderBy == nil {
		var ret string
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetOrderByOk() (*string, bool) {
	if o == nil || o.OrderBy == nil {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasOrderBy() bool {
	if o != nil && o.OrderBy != nil {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given string and assigns it to the OrderBy field.
func (o *StatsAppliancesList) SetOrderBy(v string) {
	o.OrderBy = &v
}

// GetDescending returns the Descending field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetDescending() bool {
	if o == nil || o.Descending == nil {
		var ret bool
		return ret
	}
	return *o.Descending
}

// GetDescendingOk returns a tuple with the Descending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetDescendingOk() (*bool, bool) {
	if o == nil || o.Descending == nil {
		return nil, false
	}
	return o.Descending, true
}

// HasDescending returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasDescending() bool {
	if o != nil && o.Descending != nil {
		return true
	}

	return false
}

// SetDescending gets a reference to the given bool and assigns it to the Descending field.
func (o *StatsAppliancesList) SetDescending(v bool) {
	o.Descending = &v
}

// GetQueries returns the Queries field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetQueries() []string {
	if o == nil || o.Queries == nil {
		var ret []string
		return ret
	}
	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetQueriesOk() ([]string, bool) {
	if o == nil || o.Queries == nil {
		return nil, false
	}
	return o.Queries, true
}

// HasQueries returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasQueries() bool {
	if o != nil && o.Queries != nil {
		return true
	}

	return false
}

// SetQueries gets a reference to the given []string and assigns it to the Queries field.
func (o *StatsAppliancesList) SetQueries(v []string) {
	o.Queries = v
}

// GetFilterBy returns the FilterBy field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetFilterBy() []FilterBy {
	if o == nil || o.FilterBy == nil {
		var ret []FilterBy
		return ret
	}
	return o.FilterBy
}

// GetFilterByOk returns a tuple with the FilterBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetFilterByOk() ([]FilterBy, bool) {
	if o == nil || o.FilterBy == nil {
		return nil, false
	}
	return o.FilterBy, true
}

// HasFilterBy returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasFilterBy() bool {
	if o != nil && o.FilterBy != nil {
		return true
	}

	return false
}

// SetFilterBy gets a reference to the given []FilterBy and assigns it to the FilterBy field.
func (o *StatsAppliancesList) SetFilterBy(v []FilterBy) {
	o.FilterBy = v
}

// GetControllerCount returns the ControllerCount field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetControllerCount() float32 {
	if o == nil || o.ControllerCount == nil {
		var ret float32
		return ret
	}
	return *o.ControllerCount
}

// GetControllerCountOk returns a tuple with the ControllerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetControllerCountOk() (*float32, bool) {
	if o == nil || o.ControllerCount == nil {
		return nil, false
	}
	return o.ControllerCount, true
}

// HasControllerCount returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasControllerCount() bool {
	if o != nil && o.ControllerCount != nil {
		return true
	}

	return false
}

// SetControllerCount gets a reference to the given float32 and assigns it to the ControllerCount field.
func (o *StatsAppliancesList) SetControllerCount(v float32) {
	o.ControllerCount = &v
}

// GetGatewayCount returns the GatewayCount field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetGatewayCount() float32 {
	if o == nil || o.GatewayCount == nil {
		var ret float32
		return ret
	}
	return *o.GatewayCount
}

// GetGatewayCountOk returns a tuple with the GatewayCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetGatewayCountOk() (*float32, bool) {
	if o == nil || o.GatewayCount == nil {
		return nil, false
	}
	return o.GatewayCount, true
}

// HasGatewayCount returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasGatewayCount() bool {
	if o != nil && o.GatewayCount != nil {
		return true
	}

	return false
}

// SetGatewayCount gets a reference to the given float32 and assigns it to the GatewayCount field.
func (o *StatsAppliancesList) SetGatewayCount(v float32) {
	o.GatewayCount = &v
}

// GetApplianceCount returns the ApplianceCount field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetApplianceCount() float32 {
	if o == nil || o.ApplianceCount == nil {
		var ret float32
		return ret
	}
	return *o.ApplianceCount
}

// GetApplianceCountOk returns a tuple with the ApplianceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetApplianceCountOk() (*float32, bool) {
	if o == nil || o.ApplianceCount == nil {
		return nil, false
	}
	return o.ApplianceCount, true
}

// HasApplianceCount returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasApplianceCount() bool {
	if o != nil && o.ApplianceCount != nil {
		return true
	}

	return false
}

// SetApplianceCount gets a reference to the given float32 and assigns it to the ApplianceCount field.
func (o *StatsAppliancesList) SetApplianceCount(v float32) {
	o.ApplianceCount = &v
}

// GetLogServerCount returns the LogServerCount field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetLogServerCount() float32 {
	if o == nil || o.LogServerCount == nil {
		var ret float32
		return ret
	}
	return *o.LogServerCount
}

// GetLogServerCountOk returns a tuple with the LogServerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetLogServerCountOk() (*float32, bool) {
	if o == nil || o.LogServerCount == nil {
		return nil, false
	}
	return o.LogServerCount, true
}

// HasLogServerCount returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasLogServerCount() bool {
	if o != nil && o.LogServerCount != nil {
		return true
	}

	return false
}

// SetLogServerCount gets a reference to the given float32 and assigns it to the LogServerCount field.
func (o *StatsAppliancesList) SetLogServerCount(v float32) {
	o.LogServerCount = &v
}

// GetLogForwarderCount returns the LogForwarderCount field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetLogForwarderCount() float32 {
	if o == nil || o.LogForwarderCount == nil {
		var ret float32
		return ret
	}
	return *o.LogForwarderCount
}

// GetLogForwarderCountOk returns a tuple with the LogForwarderCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetLogForwarderCountOk() (*float32, bool) {
	if o == nil || o.LogForwarderCount == nil {
		return nil, false
	}
	return o.LogForwarderCount, true
}

// HasLogForwarderCount returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasLogForwarderCount() bool {
	if o != nil && o.LogForwarderCount != nil {
		return true
	}

	return false
}

// SetLogForwarderCount gets a reference to the given float32 and assigns it to the LogForwarderCount field.
func (o *StatsAppliancesList) SetLogForwarderCount(v float32) {
	o.LogForwarderCount = &v
}

// GetConnectorCount returns the ConnectorCount field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetConnectorCount() float32 {
	if o == nil || o.ConnectorCount == nil {
		var ret float32
		return ret
	}
	return *o.ConnectorCount
}

// GetConnectorCountOk returns a tuple with the ConnectorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetConnectorCountOk() (*float32, bool) {
	if o == nil || o.ConnectorCount == nil {
		return nil, false
	}
	return o.ConnectorCount, true
}

// HasConnectorCount returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasConnectorCount() bool {
	if o != nil && o.ConnectorCount != nil {
		return true
	}

	return false
}

// SetConnectorCount gets a reference to the given float32 and assigns it to the ConnectorCount field.
func (o *StatsAppliancesList) SetConnectorCount(v float32) {
	o.ConnectorCount = &v
}

// GetPortalCount returns the PortalCount field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetPortalCount() float32 {
	if o == nil || o.PortalCount == nil {
		var ret float32
		return ret
	}
	return *o.PortalCount
}

// GetPortalCountOk returns a tuple with the PortalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetPortalCountOk() (*float32, bool) {
	if o == nil || o.PortalCount == nil {
		return nil, false
	}
	return o.PortalCount, true
}

// HasPortalCount returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasPortalCount() bool {
	if o != nil && o.PortalCount != nil {
		return true
	}

	return false
}

// SetPortalCount gets a reference to the given float32 and assigns it to the PortalCount field.
func (o *StatsAppliancesList) SetPortalCount(v float32) {
	o.PortalCount = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *StatsAppliancesList) GetData() []StatsAppliancesListAllOfData {
	if o == nil || o.Data == nil {
		var ret []StatsAppliancesListAllOfData
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAppliancesList) GetDataOk() ([]StatsAppliancesListAllOfData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *StatsAppliancesList) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []StatsAppliancesListAllOfData and assigns it to the Data field.
func (o *StatsAppliancesList) SetData(v []StatsAppliancesListAllOfData) {
	o.Data = v
}

func (o StatsAppliancesList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CreationDate != nil {
		toSerialize["creationDate"] = o.CreationDate
	}
	if o.RefreshInterval != nil {
		toSerialize["refreshInterval"] = o.RefreshInterval
	}
	if o.Range != nil {
		toSerialize["range"] = o.Range
	}
	if o.OrderBy != nil {
		toSerialize["orderBy"] = o.OrderBy
	}
	if o.Descending != nil {
		toSerialize["descending"] = o.Descending
	}
	if o.Queries != nil {
		toSerialize["queries"] = o.Queries
	}
	if o.FilterBy != nil {
		toSerialize["filterBy"] = o.FilterBy
	}
	if o.ControllerCount != nil {
		toSerialize["controllerCount"] = o.ControllerCount
	}
	if o.GatewayCount != nil {
		toSerialize["gatewayCount"] = o.GatewayCount
	}
	if o.ApplianceCount != nil {
		toSerialize["applianceCount"] = o.ApplianceCount
	}
	if o.LogServerCount != nil {
		toSerialize["logServerCount"] = o.LogServerCount
	}
	if o.LogForwarderCount != nil {
		toSerialize["logForwarderCount"] = o.LogForwarderCount
	}
	if o.ConnectorCount != nil {
		toSerialize["connectorCount"] = o.ConnectorCount
	}
	if o.PortalCount != nil {
		toSerialize["portalCount"] = o.PortalCount
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableStatsAppliancesList struct {
	value *StatsAppliancesList
	isSet bool
}

func (v NullableStatsAppliancesList) Get() *StatsAppliancesList {
	return v.value
}

func (v *NullableStatsAppliancesList) Set(val *StatsAppliancesList) {
	v.value = val
	v.isSet = true
}

func (v NullableStatsAppliancesList) IsSet() bool {
	return v.isSet
}

func (v *NullableStatsAppliancesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatsAppliancesList(val *StatsAppliancesList) *NullableStatsAppliancesList {
	return &NullableStatsAppliancesList{value: val, isSet: true}
}

func (v NullableStatsAppliancesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatsAppliancesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
