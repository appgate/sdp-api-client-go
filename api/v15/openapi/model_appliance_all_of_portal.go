/*
 * Appgate SDP Controller REST API
 *
 * # About   This specification documents the REST API calls for the Appgate SDP Controller.    Please refer to the Integration chapter in the manual or contact Appgate support with any questions about   this functionality. # Getting Started   Requirements for API scripting:   - Access to the Admin/API TLS Connection (default port 8443) of a Controller appliance.     (https://sdphelp.appgate.com/adminguide/appliance-functions-configure.html?anchor=admin-api)   - An API user with relevant permissions.     (https://sdphelp.appgate.com/adminguide/administrative-roles-configure.html)   - In order to use the simple login API, Admin MFA must be disabled or the API user must be excluded.     (https://sdphelp.appgate.com/adminguide/mfa-for-admins.html) # Base path   HTTPS requests must be sent to the Admin Interface hostname and port, with **_/admin** path.    For example: **https://appgate.company.com:8443/admin**    All requests must have the **Accept** header as:    **application/vnd.appgate.peer-v15+json** # API Conventions   API conventions are  important to understand and follow strictly.    - While updating objects (via PUT), entire object must be sent with all fields.     - For example, in order to add a remedy method to the condition below:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": []       }       ```     - send the entire object with updated and non-updated fields:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": [{\"type\": \"DisplayMessage\", \"message\": \"test message\"}]       }       ```    - In case Controller returns an error (non-2xx HTTP status code), response body is JSON.     The \"message\" field contains information about the error.     HTTP 422 \"Unprocessable Entity\" has extra `errors` field to list all the issues with specific fields.    - Empty string (\"\") is considered a different value than \"null\" or field being omitted from JSON.     Omitting the field is recommend if no value is intended.     Empty string (\"\") will be almost always rejected as invalid value.    - There are common pattern between many objects:     - **Configuration Objects**: There are many objects with common fields, namely \"id\", \"name\", \"notes\", \"created\"       and \"updated\". These entities are listed, queried, created, updated and deleted in a similar fashion.     - **Distinguished Name**: Users and Devices are identified with what is called Distinguished Names, as used in        LDAP. The distinguished format that identifies a device and a user combination is        \"CN=\\<Device ID\\>,CN=\\<username\\>,OU=\\<Identity Provider Name\\>\". Some objects have the        \"userDistinguishedName\" field, which does not include the CN for Device ID.        This identifies a user on every device.
 *
 * API version: API version 15
 * Contact: appgatesdp.support@appgate.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApplianceAllOfPortal Portal settings.
type ApplianceAllOfPortal struct {
	// Whether the Portal is enabled on this appliance or not.
	Enabled  *bool `json:"enabled,omitempty"`
	HttpsP12 *P12  `json:"httpsP12,omitempty"`
	// P12 files for proxying traffic to HTTPS endpoints.
	ProxyP12s *[]P12 `json:"proxyP12s,omitempty"`
	// Names of the profiles in this Collective to use in the Portal.
	Profiles *[]string `json:"profiles,omitempty"`
	// Profiles from other Collectives to use in the Portal.
	ExternalProfiles *[]ApplianceAllOfPortalExternalProfiles `json:"externalProfiles,omitempty"`
}

// NewApplianceAllOfPortal instantiates a new ApplianceAllOfPortal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceAllOfPortal() *ApplianceAllOfPortal {
	this := ApplianceAllOfPortal{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewApplianceAllOfPortalWithDefaults instantiates a new ApplianceAllOfPortal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceAllOfPortalWithDefaults() *ApplianceAllOfPortal {
	this := ApplianceAllOfPortal{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApplianceAllOfPortal) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceAllOfPortal) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApplianceAllOfPortal) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApplianceAllOfPortal) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHttpsP12 returns the HttpsP12 field value if set, zero value otherwise.
func (o *ApplianceAllOfPortal) GetHttpsP12() P12 {
	if o == nil || o.HttpsP12 == nil {
		var ret P12
		return ret
	}
	return *o.HttpsP12
}

// GetHttpsP12Ok returns a tuple with the HttpsP12 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceAllOfPortal) GetHttpsP12Ok() (*P12, bool) {
	if o == nil || o.HttpsP12 == nil {
		return nil, false
	}
	return o.HttpsP12, true
}

// HasHttpsP12 returns a boolean if a field has been set.
func (o *ApplianceAllOfPortal) HasHttpsP12() bool {
	if o != nil && o.HttpsP12 != nil {
		return true
	}

	return false
}

// SetHttpsP12 gets a reference to the given P12 and assigns it to the HttpsP12 field.
func (o *ApplianceAllOfPortal) SetHttpsP12(v P12) {
	o.HttpsP12 = &v
}

// GetProxyP12s returns the ProxyP12s field value if set, zero value otherwise.
func (o *ApplianceAllOfPortal) GetProxyP12s() []P12 {
	if o == nil || o.ProxyP12s == nil {
		var ret []P12
		return ret
	}
	return *o.ProxyP12s
}

// GetProxyP12sOk returns a tuple with the ProxyP12s field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceAllOfPortal) GetProxyP12sOk() (*[]P12, bool) {
	if o == nil || o.ProxyP12s == nil {
		return nil, false
	}
	return o.ProxyP12s, true
}

// HasProxyP12s returns a boolean if a field has been set.
func (o *ApplianceAllOfPortal) HasProxyP12s() bool {
	if o != nil && o.ProxyP12s != nil {
		return true
	}

	return false
}

// SetProxyP12s gets a reference to the given []P12 and assigns it to the ProxyP12s field.
func (o *ApplianceAllOfPortal) SetProxyP12s(v []P12) {
	o.ProxyP12s = &v
}

// GetProfiles returns the Profiles field value if set, zero value otherwise.
func (o *ApplianceAllOfPortal) GetProfiles() []string {
	if o == nil || o.Profiles == nil {
		var ret []string
		return ret
	}
	return *o.Profiles
}

// GetProfilesOk returns a tuple with the Profiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceAllOfPortal) GetProfilesOk() (*[]string, bool) {
	if o == nil || o.Profiles == nil {
		return nil, false
	}
	return o.Profiles, true
}

// HasProfiles returns a boolean if a field has been set.
func (o *ApplianceAllOfPortal) HasProfiles() bool {
	if o != nil && o.Profiles != nil {
		return true
	}

	return false
}

// SetProfiles gets a reference to the given []string and assigns it to the Profiles field.
func (o *ApplianceAllOfPortal) SetProfiles(v []string) {
	o.Profiles = &v
}

// GetExternalProfiles returns the ExternalProfiles field value if set, zero value otherwise.
func (o *ApplianceAllOfPortal) GetExternalProfiles() []ApplianceAllOfPortalExternalProfiles {
	if o == nil || o.ExternalProfiles == nil {
		var ret []ApplianceAllOfPortalExternalProfiles
		return ret
	}
	return *o.ExternalProfiles
}

// GetExternalProfilesOk returns a tuple with the ExternalProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceAllOfPortal) GetExternalProfilesOk() (*[]ApplianceAllOfPortalExternalProfiles, bool) {
	if o == nil || o.ExternalProfiles == nil {
		return nil, false
	}
	return o.ExternalProfiles, true
}

// HasExternalProfiles returns a boolean if a field has been set.
func (o *ApplianceAllOfPortal) HasExternalProfiles() bool {
	if o != nil && o.ExternalProfiles != nil {
		return true
	}

	return false
}

// SetExternalProfiles gets a reference to the given []ApplianceAllOfPortalExternalProfiles and assigns it to the ExternalProfiles field.
func (o *ApplianceAllOfPortal) SetExternalProfiles(v []ApplianceAllOfPortalExternalProfiles) {
	o.ExternalProfiles = &v
}

func (o ApplianceAllOfPortal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.HttpsP12 != nil {
		toSerialize["httpsP12"] = o.HttpsP12
	}
	if o.ProxyP12s != nil {
		toSerialize["proxyP12s"] = o.ProxyP12s
	}
	if o.Profiles != nil {
		toSerialize["profiles"] = o.Profiles
	}
	if o.ExternalProfiles != nil {
		toSerialize["externalProfiles"] = o.ExternalProfiles
	}
	return json.Marshal(toSerialize)
}

type NullableApplianceAllOfPortal struct {
	value *ApplianceAllOfPortal
	isSet bool
}

func (v NullableApplianceAllOfPortal) Get() *ApplianceAllOfPortal {
	return v.value
}

func (v *NullableApplianceAllOfPortal) Set(val *ApplianceAllOfPortal) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceAllOfPortal) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceAllOfPortal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceAllOfPortal(val *ApplianceAllOfPortal) *NullableApplianceAllOfPortal {
	return &NullableApplianceAllOfPortal{value: val, isSet: true}
}

func (v NullableApplianceAllOfPortal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceAllOfPortal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
