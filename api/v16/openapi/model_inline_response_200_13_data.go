/*
Appgate SDP Controller REST API

# About   This specification documents the REST API calls for the Appgate SDP Controller.    Please refer to the REST API chapter in the manual or contact Appgate support with any questions about   this functionality. # Getting Started   Requirements for API scripting:   - Access to the Admin/API TLS Connection (default port 8443) of a Controller appliance.     (https://sdphelp.appgate.com/adminguide/appliance-function-configure.html?anchor=admin-api)   - An API user with relevant permissions.     (https://sdphelp.appgate.com/adminguide/administrative-roles-configure.html)   - In order to use the simple login API, Admin MFA must be disabled or the API user must be excluded.     (https://sdphelp.appgate.com/adminguide/mfa-for-admins.html) # Base path   HTTPS requests must be sent to the Admin Interface hostname and port, with **_/admin** path.    For example: **https://appgate.company.com:8443/admin**    All requests must have the **Accept** header as:    **application/vnd.appgate.peer-v16+json** # API Conventions   API conventions are  important to understand and follow strictly.    - While updating objects (via PUT), entire object must be sent with all fields.     - For example, in order to add a remedy method to the condition below:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": []       }       ```     - send the entire object with updated and non-updated fields:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": [{\"type\": \"DisplayMessage\", \"message\": \"test message\"}]       }       ```    - In case Controller returns an error (non-2xx HTTP status code), response body is JSON.     The \"message\" field contains information about the error.     HTTP 422 \"Unprocessable Entity\" has extra `errors` field to list all the issues with specific fields.    - Empty string (\"\") is considered a different value than \"null\" or field being omitted from JSON.     Omitting the field is recommend if no value is intended.     Empty string (\"\") will be almost always rejected as invalid value.    - There are common pattern between many objects:     - **Configuration Objects**: There are many objects with common fields, namely \"id\", \"name\", \"notes\", \"created\"       and \"updated\". These entities are listed, queried, created, updated and deleted in a similar fashion.     - **Distinguished Name**: Users and Devices are identified with what is called Distinguished Names, as used in        LDAP. The distinguished format that identifies a device and a user combination is        \"CN=\\<Device ID\\>,CN=\\<username\\>,OU=\\<Identity Provider Name\\>\". Some objects have the        \"userDistinguishedName\" field, which does not include the CN for Device ID.        This identifies a user on every device.

API version: API version 16.0
Contact: appgatesdp.support@appgate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse20013Data Details of an identity provider required for logging in.
type InlineResponse20013Data struct {
	// Name of the identity provider.
	Name *string `json:"name,omitempty"`
	// The type of the identity provider.
	Type *string `json:"type,omitempty"`
	// The SAML login URL.
	RedirectUrl *string `json:"redirectUrl,omitempty"`
	// The prioritization of which client certificate to use.
	CertificatePriorities *[]interface{} `json:"certificatePriorities,omitempty"`
}

// NewInlineResponse20013Data instantiates a new InlineResponse20013Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20013Data() *InlineResponse20013Data {
	this := InlineResponse20013Data{}
	return &this
}

// NewInlineResponse20013DataWithDefaults instantiates a new InlineResponse20013Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20013DataWithDefaults() *InlineResponse20013Data {
	this := InlineResponse20013Data{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineResponse20013Data) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20013Data) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineResponse20013Data) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineResponse20013Data) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InlineResponse20013Data) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20013Data) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InlineResponse20013Data) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InlineResponse20013Data) SetType(v string) {
	o.Type = &v
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise.
func (o *InlineResponse20013Data) GetRedirectUrl() string {
	if o == nil || o.RedirectUrl == nil {
		var ret string
		return ret
	}
	return *o.RedirectUrl
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20013Data) GetRedirectUrlOk() (*string, bool) {
	if o == nil || o.RedirectUrl == nil {
		return nil, false
	}
	return o.RedirectUrl, true
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *InlineResponse20013Data) HasRedirectUrl() bool {
	if o != nil && o.RedirectUrl != nil {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given string and assigns it to the RedirectUrl field.
func (o *InlineResponse20013Data) SetRedirectUrl(v string) {
	o.RedirectUrl = &v
}

// GetCertificatePriorities returns the CertificatePriorities field value if set, zero value otherwise.
func (o *InlineResponse20013Data) GetCertificatePriorities() []interface{} {
	if o == nil || o.CertificatePriorities == nil {
		var ret []interface{}
		return ret
	}
	return *o.CertificatePriorities
}

// GetCertificatePrioritiesOk returns a tuple with the CertificatePriorities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20013Data) GetCertificatePrioritiesOk() (*[]interface{}, bool) {
	if o == nil || o.CertificatePriorities == nil {
		return nil, false
	}
	return o.CertificatePriorities, true
}

// HasCertificatePriorities returns a boolean if a field has been set.
func (o *InlineResponse20013Data) HasCertificatePriorities() bool {
	if o != nil && o.CertificatePriorities != nil {
		return true
	}

	return false
}

// SetCertificatePriorities gets a reference to the given []interface{} and assigns it to the CertificatePriorities field.
func (o *InlineResponse20013Data) SetCertificatePriorities(v []interface{}) {
	o.CertificatePriorities = &v
}

func (o InlineResponse20013Data) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.RedirectUrl != nil {
		toSerialize["redirectUrl"] = o.RedirectUrl
	}
	if o.CertificatePriorities != nil {
		toSerialize["certificatePriorities"] = o.CertificatePriorities
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20013Data struct {
	value *InlineResponse20013Data
	isSet bool
}

func (v NullableInlineResponse20013Data) Get() *InlineResponse20013Data {
	return v.value
}

func (v *NullableInlineResponse20013Data) Set(val *InlineResponse20013Data) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20013Data) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20013Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20013Data(val *InlineResponse20013Data) *NullableInlineResponse20013Data {
	return &NullableInlineResponse20013Data{value: val, isSet: true}
}

func (v NullableInlineResponse20013Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20013Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
