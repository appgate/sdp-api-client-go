/*
 * AppGate SDP Controller REST API
 *
 * # About   This specification documents the REST API calls for the AppGate SDP Controller.    Please refer to the Integration chapter in the manual or contact AppGate support with any questions about   this functionality. # Getting Started   Requirements for API scripting:   - Access to the peer interface (default port 444) of a Controller appliance.     (https://sdphelp.appgate.com/adminguide/appliances-configure.html?anchor=peer)   - An API user with relevant permissions.     (https://sdphelp.appgate.com/adminguide/administrative-roles-configure.html)   - In order to use the simple login API, Admin MFA must be disabled or the API user must be excluded.     (https://sdphelp.appgate.com/adminguide/mfa-for-admins.html) # Base path   HTTPS requests must be sent to the Peer Interface hostname and port, with **_/admin** path.    For example: **https://appgate.company.com:444/admin**    All requests must have the **Accept** header as:    **application/vnd.appgate.peer-v12+json** # API Conventions   API conventions are  important to understand and follow strictly.    - While updating objects (via PUT), entire object must be sent with all fields.     - For example, if in order to add a remedy method to the condition below:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": []       }       ```     - send the entire object with updated and non-updated fields:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": [{\"type\": \"DisplayMessage\", \"message\": \"test message\"}]       }       ```    - In case Controller returns an error (non-2xx HTTP status code), response body is JSON.     The \"message\" field contains information abot the error.     HTTP 422 \"Unprocessable Entity\" has extra `errors` field to list all the issues with specific fields.    - Empty string (\"\") is considered a different value than \"null\" or field being omitted from JSON.     Omitting the field is recommend if no value is intended.     Empty string (\"\") will be almost always rejected as invalid value.    - There are common pattern between many objects:     - **Configuration Objects**: There are many objects with common fields, namely \"id\", \"name\", \"notes\", \"created\"       and \"updated\". These entities are listed, queried, created, updated and deleted in a similar fashion.     - **Distinguished Name**: Users and Devices are identified with what is called Distinguished Names, as used in        LDAP. The distinguished format that identifies a device and a user combination is        \"CN=\\<Device ID\\>,CN=\\<username\\>,OU=\\<Identity Provider Name\\>\". Some objects have the        \"userDistinguishedName\" field, which does not include the CN for Device ID.        This identifies a user on every device.
 *
 * API version: API version 12
 * Contact: appgatesdp.support@appgate.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// SiteAllOfVpn VPN configuration for this Site.
type SiteAllOfVpn struct {
	// Configuration for keeping track of states.
	StateSharing *bool `json:"stateSharing,omitempty"`
	// Source NAT.
	Snat     *bool                 `json:"snat,omitempty"`
	Tls      *SiteAllOfVpnTls      `json:"tls,omitempty"`
	Dtls     *SiteAllOfVpnDtls     `json:"dtls,omitempty"`
	RouteVia *SiteAllOfVpnRouteVia `json:"routeVia,omitempty"`
	// Flag for manipulating web proxy p12 file. Setting this false will delete the existing p12 file from database.
	WebProxyEnabled *bool `json:"webProxyEnabled,omitempty"`
	// The PKCS12 package to be used for web proxy. The file must be with no password and must include the full certificate chain and a private key. In Base64 format.
	WebProxyKeyStore *string `json:"webProxyKeyStore,omitempty"`
	// The subject name of the certificate with private key in the PKCS12 file for web proxy assigned to this site.
	WebProxyCertificateSubjectName *string `json:"webProxyCertificateSubjectName,omitempty"`
	// Frequency configuration for generating IP Access audit logs for a connection.
	IpAccessLogIntervalSeconds *float32 `json:"ipAccessLogIntervalSeconds,omitempty"`
}

// NewSiteAllOfVpn instantiates a new SiteAllOfVpn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteAllOfVpn() *SiteAllOfVpn {
	this := SiteAllOfVpn{}
	var stateSharing bool = false
	this.StateSharing = &stateSharing
	var snat bool = false
	this.Snat = &snat
	var ipAccessLogIntervalSeconds float32 = 120
	this.IpAccessLogIntervalSeconds = &ipAccessLogIntervalSeconds
	return &this
}

// NewSiteAllOfVpnWithDefaults instantiates a new SiteAllOfVpn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteAllOfVpnWithDefaults() *SiteAllOfVpn {
	this := SiteAllOfVpn{}
	var stateSharing bool = false
	this.StateSharing = &stateSharing
	var snat bool = false
	this.Snat = &snat
	var ipAccessLogIntervalSeconds float32 = 120
	this.IpAccessLogIntervalSeconds = &ipAccessLogIntervalSeconds
	return &this
}

// GetStateSharing returns the StateSharing field value if set, zero value otherwise.
func (o *SiteAllOfVpn) GetStateSharing() bool {
	if o == nil || o.StateSharing == nil {
		var ret bool
		return ret
	}
	return *o.StateSharing
}

// GetStateSharingOk returns a tuple with the StateSharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAllOfVpn) GetStateSharingOk() (*bool, bool) {
	if o == nil || o.StateSharing == nil {
		return nil, false
	}
	return o.StateSharing, true
}

// HasStateSharing returns a boolean if a field has been set.
func (o *SiteAllOfVpn) HasStateSharing() bool {
	if o != nil && o.StateSharing != nil {
		return true
	}

	return false
}

// SetStateSharing gets a reference to the given bool and assigns it to the StateSharing field.
func (o *SiteAllOfVpn) SetStateSharing(v bool) {
	o.StateSharing = &v
}

// GetSnat returns the Snat field value if set, zero value otherwise.
func (o *SiteAllOfVpn) GetSnat() bool {
	if o == nil || o.Snat == nil {
		var ret bool
		return ret
	}
	return *o.Snat
}

// GetSnatOk returns a tuple with the Snat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAllOfVpn) GetSnatOk() (*bool, bool) {
	if o == nil || o.Snat == nil {
		return nil, false
	}
	return o.Snat, true
}

// HasSnat returns a boolean if a field has been set.
func (o *SiteAllOfVpn) HasSnat() bool {
	if o != nil && o.Snat != nil {
		return true
	}

	return false
}

// SetSnat gets a reference to the given bool and assigns it to the Snat field.
func (o *SiteAllOfVpn) SetSnat(v bool) {
	o.Snat = &v
}

// GetTls returns the Tls field value if set, zero value otherwise.
func (o *SiteAllOfVpn) GetTls() SiteAllOfVpnTls {
	if o == nil || o.Tls == nil {
		var ret SiteAllOfVpnTls
		return ret
	}
	return *o.Tls
}

// GetTlsOk returns a tuple with the Tls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAllOfVpn) GetTlsOk() (*SiteAllOfVpnTls, bool) {
	if o == nil || o.Tls == nil {
		return nil, false
	}
	return o.Tls, true
}

// HasTls returns a boolean if a field has been set.
func (o *SiteAllOfVpn) HasTls() bool {
	if o != nil && o.Tls != nil {
		return true
	}

	return false
}

// SetTls gets a reference to the given SiteAllOfVpnTls and assigns it to the Tls field.
func (o *SiteAllOfVpn) SetTls(v SiteAllOfVpnTls) {
	o.Tls = &v
}

// GetDtls returns the Dtls field value if set, zero value otherwise.
func (o *SiteAllOfVpn) GetDtls() SiteAllOfVpnDtls {
	if o == nil || o.Dtls == nil {
		var ret SiteAllOfVpnDtls
		return ret
	}
	return *o.Dtls
}

// GetDtlsOk returns a tuple with the Dtls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAllOfVpn) GetDtlsOk() (*SiteAllOfVpnDtls, bool) {
	if o == nil || o.Dtls == nil {
		return nil, false
	}
	return o.Dtls, true
}

// HasDtls returns a boolean if a field has been set.
func (o *SiteAllOfVpn) HasDtls() bool {
	if o != nil && o.Dtls != nil {
		return true
	}

	return false
}

// SetDtls gets a reference to the given SiteAllOfVpnDtls and assigns it to the Dtls field.
func (o *SiteAllOfVpn) SetDtls(v SiteAllOfVpnDtls) {
	o.Dtls = &v
}

// GetRouteVia returns the RouteVia field value if set, zero value otherwise.
func (o *SiteAllOfVpn) GetRouteVia() SiteAllOfVpnRouteVia {
	if o == nil || o.RouteVia == nil {
		var ret SiteAllOfVpnRouteVia
		return ret
	}
	return *o.RouteVia
}

// GetRouteViaOk returns a tuple with the RouteVia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAllOfVpn) GetRouteViaOk() (*SiteAllOfVpnRouteVia, bool) {
	if o == nil || o.RouteVia == nil {
		return nil, false
	}
	return o.RouteVia, true
}

// HasRouteVia returns a boolean if a field has been set.
func (o *SiteAllOfVpn) HasRouteVia() bool {
	if o != nil && o.RouteVia != nil {
		return true
	}

	return false
}

// SetRouteVia gets a reference to the given SiteAllOfVpnRouteVia and assigns it to the RouteVia field.
func (o *SiteAllOfVpn) SetRouteVia(v SiteAllOfVpnRouteVia) {
	o.RouteVia = &v
}

// GetWebProxyEnabled returns the WebProxyEnabled field value if set, zero value otherwise.
func (o *SiteAllOfVpn) GetWebProxyEnabled() bool {
	if o == nil || o.WebProxyEnabled == nil {
		var ret bool
		return ret
	}
	return *o.WebProxyEnabled
}

// GetWebProxyEnabledOk returns a tuple with the WebProxyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAllOfVpn) GetWebProxyEnabledOk() (*bool, bool) {
	if o == nil || o.WebProxyEnabled == nil {
		return nil, false
	}
	return o.WebProxyEnabled, true
}

// HasWebProxyEnabled returns a boolean if a field has been set.
func (o *SiteAllOfVpn) HasWebProxyEnabled() bool {
	if o != nil && o.WebProxyEnabled != nil {
		return true
	}

	return false
}

// SetWebProxyEnabled gets a reference to the given bool and assigns it to the WebProxyEnabled field.
func (o *SiteAllOfVpn) SetWebProxyEnabled(v bool) {
	o.WebProxyEnabled = &v
}

// GetWebProxyKeyStore returns the WebProxyKeyStore field value if set, zero value otherwise.
func (o *SiteAllOfVpn) GetWebProxyKeyStore() string {
	if o == nil || o.WebProxyKeyStore == nil {
		var ret string
		return ret
	}
	return *o.WebProxyKeyStore
}

// GetWebProxyKeyStoreOk returns a tuple with the WebProxyKeyStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAllOfVpn) GetWebProxyKeyStoreOk() (*string, bool) {
	if o == nil || o.WebProxyKeyStore == nil {
		return nil, false
	}
	return o.WebProxyKeyStore, true
}

// HasWebProxyKeyStore returns a boolean if a field has been set.
func (o *SiteAllOfVpn) HasWebProxyKeyStore() bool {
	if o != nil && o.WebProxyKeyStore != nil {
		return true
	}

	return false
}

// SetWebProxyKeyStore gets a reference to the given string and assigns it to the WebProxyKeyStore field.
func (o *SiteAllOfVpn) SetWebProxyKeyStore(v string) {
	o.WebProxyKeyStore = &v
}

// GetWebProxyCertificateSubjectName returns the WebProxyCertificateSubjectName field value if set, zero value otherwise.
func (o *SiteAllOfVpn) GetWebProxyCertificateSubjectName() string {
	if o == nil || o.WebProxyCertificateSubjectName == nil {
		var ret string
		return ret
	}
	return *o.WebProxyCertificateSubjectName
}

// GetWebProxyCertificateSubjectNameOk returns a tuple with the WebProxyCertificateSubjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAllOfVpn) GetWebProxyCertificateSubjectNameOk() (*string, bool) {
	if o == nil || o.WebProxyCertificateSubjectName == nil {
		return nil, false
	}
	return o.WebProxyCertificateSubjectName, true
}

// HasWebProxyCertificateSubjectName returns a boolean if a field has been set.
func (o *SiteAllOfVpn) HasWebProxyCertificateSubjectName() bool {
	if o != nil && o.WebProxyCertificateSubjectName != nil {
		return true
	}

	return false
}

// SetWebProxyCertificateSubjectName gets a reference to the given string and assigns it to the WebProxyCertificateSubjectName field.
func (o *SiteAllOfVpn) SetWebProxyCertificateSubjectName(v string) {
	o.WebProxyCertificateSubjectName = &v
}

// GetIpAccessLogIntervalSeconds returns the IpAccessLogIntervalSeconds field value if set, zero value otherwise.
func (o *SiteAllOfVpn) GetIpAccessLogIntervalSeconds() float32 {
	if o == nil || o.IpAccessLogIntervalSeconds == nil {
		var ret float32
		return ret
	}
	return *o.IpAccessLogIntervalSeconds
}

// GetIpAccessLogIntervalSecondsOk returns a tuple with the IpAccessLogIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAllOfVpn) GetIpAccessLogIntervalSecondsOk() (*float32, bool) {
	if o == nil || o.IpAccessLogIntervalSeconds == nil {
		return nil, false
	}
	return o.IpAccessLogIntervalSeconds, true
}

// HasIpAccessLogIntervalSeconds returns a boolean if a field has been set.
func (o *SiteAllOfVpn) HasIpAccessLogIntervalSeconds() bool {
	if o != nil && o.IpAccessLogIntervalSeconds != nil {
		return true
	}

	return false
}

// SetIpAccessLogIntervalSeconds gets a reference to the given float32 and assigns it to the IpAccessLogIntervalSeconds field.
func (o *SiteAllOfVpn) SetIpAccessLogIntervalSeconds(v float32) {
	o.IpAccessLogIntervalSeconds = &v
}

func (o SiteAllOfVpn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StateSharing != nil {
		toSerialize["stateSharing"] = o.StateSharing
	}
	if o.Snat != nil {
		toSerialize["snat"] = o.Snat
	}
	if o.Tls != nil {
		toSerialize["tls"] = o.Tls
	}
	if o.Dtls != nil {
		toSerialize["dtls"] = o.Dtls
	}
	if o.RouteVia != nil {
		toSerialize["routeVia"] = o.RouteVia
	}
	if o.WebProxyEnabled != nil {
		toSerialize["webProxyEnabled"] = o.WebProxyEnabled
	}
	if o.WebProxyKeyStore != nil {
		toSerialize["webProxyKeyStore"] = o.WebProxyKeyStore
	}
	if o.WebProxyCertificateSubjectName != nil {
		toSerialize["webProxyCertificateSubjectName"] = o.WebProxyCertificateSubjectName
	}
	if o.IpAccessLogIntervalSeconds != nil {
		toSerialize["ipAccessLogIntervalSeconds"] = o.IpAccessLogIntervalSeconds
	}
	return json.Marshal(toSerialize)
}

type NullableSiteAllOfVpn struct {
	value *SiteAllOfVpn
	isSet bool
}

func (v NullableSiteAllOfVpn) Get() *SiteAllOfVpn {
	return v.value
}

func (v *NullableSiteAllOfVpn) Set(val *SiteAllOfVpn) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteAllOfVpn) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteAllOfVpn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteAllOfVpn(val *SiteAllOfVpn) *NullableSiteAllOfVpn {
	return &NullableSiteAllOfVpn{value: val, isSet: true}
}

func (v NullableSiteAllOfVpn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteAllOfVpn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
