/*
 * AppGate SDP Controller REST API
 *
 * # About   This specification documents the REST API calls for the AppGate SDP Controller.    Please refer to the Integration chapter in the manual or contact AppGate support with any questions about   this functionality. # Getting Started   Requirements for API scripting:   - Access to the peer interface (default port 444) of a Controller appliance.     (https://sdphelp.appgate.com/adminguide/appliances-configure.html?anchor=peer)   - An API user with relevant permissions.     (https://sdphelp.appgate.com/adminguide/administrative-roles-configure.html)   - In order to use the simple login API, Admin MFA must be disabled or the API user must be excluded.     (https://sdphelp.appgate.com/adminguide/mfa-for-admins.html) # Base path   HTTPS requests must be sent to the Peer Interface hostname and port, with **_/admin** path.    For example: **https://appgate.company.com:444/admin**    All requests must have the **Accept** header as:    **application/vnd.appgate.peer-v13+json** # API Conventions   API conventions are  important to understand and follow strictly.    - While updating objects (via PUT), entire object must be sent with all fields.     - For example, if in order to add a remedy method to the condition below:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": []       }       ```     - send the entire object with updated and non-updated fields:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": [{\"type\": \"DisplayMessage\", \"message\": \"test message\"}]       }       ```    - In case Controller returns an error (non-2xx HTTP status code), response body is JSON.     The \"message\" field contains information about the error.     HTTP 422 \"Unprocessable Entity\" has extra `errors` field to list all the issues with specific fields.    - Empty string (\"\") is considered a different value than \"null\" or field being omitted from JSON.     Omitting the field is recommend if no value is intended.     Empty string (\"\") will be almost always rejected as invalid value.    - There are common pattern between many objects:     - **Configuration Objects**: There are many objects with common fields, namely \"id\", \"name\", \"notes\", \"created\"       and \"updated\". These entities are listed, queried, created, updated and deleted in a similar fashion.     - **Distinguished Name**: Users and Devices are identified with what is called Distinguished Names, as used in        LDAP. The distinguished format that identifies a device and a user combination is        \"CN=\\<Device ID\\>,CN=\\<username\\>,OU=\\<Identity Provider Name\\>\". Some objects have the        \"userDistinguishedName\" field, which does not include the CN for Device ID.        This identifies a user on every device.
 *
 * API version: API version 13
 * Contact: appgatesdp.support@appgate.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// InlineResponse2004FirewallRules Firewall Rule.
type InlineResponse2004FirewallRules struct {
	// The protocol for the Firewall Rule.
	Protocol *string `json:"protocol,omitempty"`
	// The direction of the Firewall Rrule.
	Direction *string `json:"direction,omitempty"`
	// The action for the Firewall Rule.
	Action *string `json:"action,omitempty"`
	// The subnets the Firewall Rule applies to.
	Subnets *[]string `json:"subnets,omitempty"`
	// The URLs the Firewall Rule applies to in case of http_up subtype.
	Urls *[]string `json:"urls,omitempty"`
	// The ports the Firewall Rule applies to.
	Ports *[]string `json:"ports,omitempty"`
	// The ICMP types the Firewall Rule applies to. Valid for ICMP.
	Types *[]string `json:"types,omitempty"`
}

// NewInlineResponse2004FirewallRules instantiates a new InlineResponse2004FirewallRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2004FirewallRules() *InlineResponse2004FirewallRules {
	this := InlineResponse2004FirewallRules{}
	return &this
}

// NewInlineResponse2004FirewallRulesWithDefaults instantiates a new InlineResponse2004FirewallRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2004FirewallRulesWithDefaults() *InlineResponse2004FirewallRules {
	this := InlineResponse2004FirewallRules{}
	return &this
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *InlineResponse2004FirewallRules) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004FirewallRules) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *InlineResponse2004FirewallRules) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *InlineResponse2004FirewallRules) SetProtocol(v string) {
	o.Protocol = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *InlineResponse2004FirewallRules) GetDirection() string {
	if o == nil || o.Direction == nil {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004FirewallRules) GetDirectionOk() (*string, bool) {
	if o == nil || o.Direction == nil {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *InlineResponse2004FirewallRules) HasDirection() bool {
	if o != nil && o.Direction != nil {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *InlineResponse2004FirewallRules) SetDirection(v string) {
	o.Direction = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *InlineResponse2004FirewallRules) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004FirewallRules) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *InlineResponse2004FirewallRules) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *InlineResponse2004FirewallRules) SetAction(v string) {
	o.Action = &v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *InlineResponse2004FirewallRules) GetSubnets() []string {
	if o == nil || o.Subnets == nil {
		var ret []string
		return ret
	}
	return *o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004FirewallRules) GetSubnetsOk() (*[]string, bool) {
	if o == nil || o.Subnets == nil {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *InlineResponse2004FirewallRules) HasSubnets() bool {
	if o != nil && o.Subnets != nil {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []string and assigns it to the Subnets field.
func (o *InlineResponse2004FirewallRules) SetSubnets(v []string) {
	o.Subnets = &v
}

// GetUrls returns the Urls field value if set, zero value otherwise.
func (o *InlineResponse2004FirewallRules) GetUrls() []string {
	if o == nil || o.Urls == nil {
		var ret []string
		return ret
	}
	return *o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004FirewallRules) GetUrlsOk() (*[]string, bool) {
	if o == nil || o.Urls == nil {
		return nil, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *InlineResponse2004FirewallRules) HasUrls() bool {
	if o != nil && o.Urls != nil {
		return true
	}

	return false
}

// SetUrls gets a reference to the given []string and assigns it to the Urls field.
func (o *InlineResponse2004FirewallRules) SetUrls(v []string) {
	o.Urls = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *InlineResponse2004FirewallRules) GetPorts() []string {
	if o == nil || o.Ports == nil {
		var ret []string
		return ret
	}
	return *o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004FirewallRules) GetPortsOk() (*[]string, bool) {
	if o == nil || o.Ports == nil {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *InlineResponse2004FirewallRules) HasPorts() bool {
	if o != nil && o.Ports != nil {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []string and assigns it to the Ports field.
func (o *InlineResponse2004FirewallRules) SetPorts(v []string) {
	o.Ports = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *InlineResponse2004FirewallRules) GetTypes() []string {
	if o == nil || o.Types == nil {
		var ret []string
		return ret
	}
	return *o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004FirewallRules) GetTypesOk() (*[]string, bool) {
	if o == nil || o.Types == nil {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *InlineResponse2004FirewallRules) HasTypes() bool {
	if o != nil && o.Types != nil {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []string and assigns it to the Types field.
func (o *InlineResponse2004FirewallRules) SetTypes(v []string) {
	o.Types = &v
}

func (o InlineResponse2004FirewallRules) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	if o.Direction != nil {
		toSerialize["direction"] = o.Direction
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Subnets != nil {
		toSerialize["subnets"] = o.Subnets
	}
	if o.Urls != nil {
		toSerialize["urls"] = o.Urls
	}
	if o.Ports != nil {
		toSerialize["ports"] = o.Ports
	}
	if o.Types != nil {
		toSerialize["types"] = o.Types
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2004FirewallRules struct {
	value *InlineResponse2004FirewallRules
	isSet bool
}

func (v NullableInlineResponse2004FirewallRules) Get() *InlineResponse2004FirewallRules {
	return v.value
}

func (v *NullableInlineResponse2004FirewallRules) Set(val *InlineResponse2004FirewallRules) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2004FirewallRules) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2004FirewallRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2004FirewallRules(val *InlineResponse2004FirewallRules) *NullableInlineResponse2004FirewallRules {
	return &NullableInlineResponse2004FirewallRules{value: val, isSet: true}
}

func (v NullableInlineResponse2004FirewallRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2004FirewallRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
