/*
Appgate SDP Controller REST API

# About   This specification documents the REST API calls for the Appgate SDP Controller.    Please refer to the REST API chapter in the manual or contact Appgate support with any questions about   this functionality. # Getting Started   Requirements for API scripting:   - Access to the Admin/API TLS Connection (default port 8443) of a Controller appliance.     (https://sdphelp.appgate.com/adminguide/appliance-function-configure.html?anchor=admin-api)   - An API user with relevant permissions.     (https://sdphelp.appgate.com/adminguide/administrative-roles-configure.html)   - In order to use the simple login API, Admin MFA must be disabled or the API user must be excluded.     (https://sdphelp.appgate.com/adminguide/mfa-for-admins.html) # Base path   HTTPS requests must be sent to the Admin Interface hostname and port, with **_/admin** path.    For example: **https://appgate.company.com:8443/admin**    All requests must have the **Accept** header as:    **application/vnd.appgate.peer-v22+json**    An exception is made for the **_/admin/version** endpoint which instead expects an **application/json** Accept header. # API Conventions   API conventions are  important to understand and follow strictly.    - While updating objects (via PUT), entire object must be sent with all fields.     - For example, in order to add a remedy method to the condition below:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": []       }       ```     - send the entire object with updated and non-updated fields:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": [{\"type\": \"DisplayMessage\", \"message\": \"test message\"}]       }       ```    - In case Controller returns an error (non-2xx HTTP status code), response body is JSON.     The \"message\" field contains information about the error.     HTTP 422 \"Unprocessable Entity\" has extra `errors` field to list all the issues with specific fields.    - Empty string (\"\") is considered a different value than \"null\" or field being omitted from JSON.     Omitting the field is recommended if no value is intended.     Empty string (\"\") will be almost always rejected as invalid value.    - There are common pattern between many objects:     - **Configuration Objects**: There are many objects with common fields, namely \"id\", \"name\", \"notes\", \"created\"       and \"updated\". These entities are listed, queried, created, updated and deleted in a similar fashion.     - **Distinguished Name**: Users and Devices are identified with what is called Distinguished Names, as used in        LDAP. The distinguished format that identifies a device and a user combination is        \"CN=\\<Device ID\\>,CN=\\<username\\>,OU=\\<Identity Provider Name\\>\". Some objects have the        \"userDistinguishedName\" field, which does not include the CN for Device ID.        This identifies a user on every device.

API version: API version 22.4
Contact: appgatesdp.support@appgate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeviceRevocationRequest Details for token revocation request.
type DeviceRevocationRequest struct {
	// The filter to find devices by their distinguished names. It is used with \"starts with\" logic. If a full distinguished name is passed, then a single device will be affected. If \"OU=ldap\" is passed, then all devices for \"ldap\" identity provider will be affected. If left as empty string \"\", then all active devices past 24 hours will be affected. Cannot be null.
	DistinguishedNameFilter string `json:"distinguishedNameFilter"`
	// Specific distinguished names can be defined to renew tokens in bulk for a specific list of devices. \"distinguishedNameFilter\" field should be empty string for this to work.
	SpecificDistinguishedNames []string `json:"specificDistinguishedNames,omitempty"`
	// Optional parameter to revoke only devices that connected to the given Site ID.
	SiteId *string `json:"siteId,omitempty"`
	// Optional parameter to revoke only certain types of tokens.
	TokenType *string `json:"tokenType,omitempty"`
	// Optional reason text for the revocation. The value is stored and logged.
	RevocationReason *string `json:"revocationReason,omitempty"`
	// The delay time for client token revocation in minutes. Client will renew the token(s) at least 5 minutes before the revocation time, without losing connection.
	DelayMinutes *int32 `json:"delayMinutes,omitempty"`
	// In order to spread the workload on the Controllers, tokens are revoked in batches according to this value.
	DevicesPerSecond *float32 `json:"devicesPerSecond,omitempty"`
}

// NewDeviceRevocationRequest instantiates a new DeviceRevocationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceRevocationRequest(distinguishedNameFilter string) *DeviceRevocationRequest {
	this := DeviceRevocationRequest{}
	this.DistinguishedNameFilter = distinguishedNameFilter
	var delayMinutes int32 = 5
	this.DelayMinutes = &delayMinutes
	var devicesPerSecond float32 = 2
	this.DevicesPerSecond = &devicesPerSecond
	return &this
}

// NewDeviceRevocationRequestWithDefaults instantiates a new DeviceRevocationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceRevocationRequestWithDefaults() *DeviceRevocationRequest {
	this := DeviceRevocationRequest{}
	var delayMinutes int32 = 5
	this.DelayMinutes = &delayMinutes
	var devicesPerSecond float32 = 2
	this.DevicesPerSecond = &devicesPerSecond
	return &this
}

// GetDistinguishedNameFilter returns the DistinguishedNameFilter field value
func (o *DeviceRevocationRequest) GetDistinguishedNameFilter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DistinguishedNameFilter
}

// GetDistinguishedNameFilterOk returns a tuple with the DistinguishedNameFilter field value
// and a boolean to check if the value has been set.
func (o *DeviceRevocationRequest) GetDistinguishedNameFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DistinguishedNameFilter, true
}

// SetDistinguishedNameFilter sets field value
func (o *DeviceRevocationRequest) SetDistinguishedNameFilter(v string) {
	o.DistinguishedNameFilter = v
}

// GetSpecificDistinguishedNames returns the SpecificDistinguishedNames field value if set, zero value otherwise.
func (o *DeviceRevocationRequest) GetSpecificDistinguishedNames() []string {
	if o == nil || o.SpecificDistinguishedNames == nil {
		var ret []string
		return ret
	}
	return o.SpecificDistinguishedNames
}

// GetSpecificDistinguishedNamesOk returns a tuple with the SpecificDistinguishedNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRevocationRequest) GetSpecificDistinguishedNamesOk() ([]string, bool) {
	if o == nil || o.SpecificDistinguishedNames == nil {
		return nil, false
	}
	return o.SpecificDistinguishedNames, true
}

// HasSpecificDistinguishedNames returns a boolean if a field has been set.
func (o *DeviceRevocationRequest) HasSpecificDistinguishedNames() bool {
	if o != nil && o.SpecificDistinguishedNames != nil {
		return true
	}

	return false
}

// SetSpecificDistinguishedNames gets a reference to the given []string and assigns it to the SpecificDistinguishedNames field.
func (o *DeviceRevocationRequest) SetSpecificDistinguishedNames(v []string) {
	o.SpecificDistinguishedNames = v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *DeviceRevocationRequest) GetSiteId() string {
	if o == nil || o.SiteId == nil {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRevocationRequest) GetSiteIdOk() (*string, bool) {
	if o == nil || o.SiteId == nil {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *DeviceRevocationRequest) HasSiteId() bool {
	if o != nil && o.SiteId != nil {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *DeviceRevocationRequest) SetSiteId(v string) {
	o.SiteId = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *DeviceRevocationRequest) GetTokenType() string {
	if o == nil || o.TokenType == nil {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRevocationRequest) GetTokenTypeOk() (*string, bool) {
	if o == nil || o.TokenType == nil {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *DeviceRevocationRequest) HasTokenType() bool {
	if o != nil && o.TokenType != nil {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *DeviceRevocationRequest) SetTokenType(v string) {
	o.TokenType = &v
}

// GetRevocationReason returns the RevocationReason field value if set, zero value otherwise.
func (o *DeviceRevocationRequest) GetRevocationReason() string {
	if o == nil || o.RevocationReason == nil {
		var ret string
		return ret
	}
	return *o.RevocationReason
}

// GetRevocationReasonOk returns a tuple with the RevocationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRevocationRequest) GetRevocationReasonOk() (*string, bool) {
	if o == nil || o.RevocationReason == nil {
		return nil, false
	}
	return o.RevocationReason, true
}

// HasRevocationReason returns a boolean if a field has been set.
func (o *DeviceRevocationRequest) HasRevocationReason() bool {
	if o != nil && o.RevocationReason != nil {
		return true
	}

	return false
}

// SetRevocationReason gets a reference to the given string and assigns it to the RevocationReason field.
func (o *DeviceRevocationRequest) SetRevocationReason(v string) {
	o.RevocationReason = &v
}

// GetDelayMinutes returns the DelayMinutes field value if set, zero value otherwise.
func (o *DeviceRevocationRequest) GetDelayMinutes() int32 {
	if o == nil || o.DelayMinutes == nil {
		var ret int32
		return ret
	}
	return *o.DelayMinutes
}

// GetDelayMinutesOk returns a tuple with the DelayMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRevocationRequest) GetDelayMinutesOk() (*int32, bool) {
	if o == nil || o.DelayMinutes == nil {
		return nil, false
	}
	return o.DelayMinutes, true
}

// HasDelayMinutes returns a boolean if a field has been set.
func (o *DeviceRevocationRequest) HasDelayMinutes() bool {
	if o != nil && o.DelayMinutes != nil {
		return true
	}

	return false
}

// SetDelayMinutes gets a reference to the given int32 and assigns it to the DelayMinutes field.
func (o *DeviceRevocationRequest) SetDelayMinutes(v int32) {
	o.DelayMinutes = &v
}

// GetDevicesPerSecond returns the DevicesPerSecond field value if set, zero value otherwise.
func (o *DeviceRevocationRequest) GetDevicesPerSecond() float32 {
	if o == nil || o.DevicesPerSecond == nil {
		var ret float32
		return ret
	}
	return *o.DevicesPerSecond
}

// GetDevicesPerSecondOk returns a tuple with the DevicesPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRevocationRequest) GetDevicesPerSecondOk() (*float32, bool) {
	if o == nil || o.DevicesPerSecond == nil {
		return nil, false
	}
	return o.DevicesPerSecond, true
}

// HasDevicesPerSecond returns a boolean if a field has been set.
func (o *DeviceRevocationRequest) HasDevicesPerSecond() bool {
	if o != nil && o.DevicesPerSecond != nil {
		return true
	}

	return false
}

// SetDevicesPerSecond gets a reference to the given float32 and assigns it to the DevicesPerSecond field.
func (o *DeviceRevocationRequest) SetDevicesPerSecond(v float32) {
	o.DevicesPerSecond = &v
}

func (o DeviceRevocationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["distinguishedNameFilter"] = o.DistinguishedNameFilter
	}
	if o.SpecificDistinguishedNames != nil {
		toSerialize["specificDistinguishedNames"] = o.SpecificDistinguishedNames
	}
	if o.SiteId != nil {
		toSerialize["siteId"] = o.SiteId
	}
	if o.TokenType != nil {
		toSerialize["tokenType"] = o.TokenType
	}
	if o.RevocationReason != nil {
		toSerialize["revocationReason"] = o.RevocationReason
	}
	if o.DelayMinutes != nil {
		toSerialize["delayMinutes"] = o.DelayMinutes
	}
	if o.DevicesPerSecond != nil {
		toSerialize["devicesPerSecond"] = o.DevicesPerSecond
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceRevocationRequest struct {
	value *DeviceRevocationRequest
	isSet bool
}

func (v NullableDeviceRevocationRequest) Get() *DeviceRevocationRequest {
	return v.value
}

func (v *NullableDeviceRevocationRequest) Set(val *DeviceRevocationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceRevocationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceRevocationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceRevocationRequest(val *DeviceRevocationRequest) *NullableDeviceRevocationRequest {
	return &NullableDeviceRevocationRequest{value: val, isSet: true}
}

func (v NullableDeviceRevocationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceRevocationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
