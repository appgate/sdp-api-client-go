/*
Appgate SDP Controller REST API

# About   This specification documents the REST API calls for the Appgate SDP Controller.    Please refer to the REST API chapter in the manual or contact Appgate support with any questions about   this functionality. # Getting Started   Requirements for API scripting:   - Access to the Admin/API TLS Connection (default port 8443) of a Controller appliance.     (https://sdphelp.appgate.com/adminguide/appliance-function-configure.html?anchor=admin-api)   - An API user with relevant permissions.     (https://sdphelp.appgate.com/adminguide/administrative-roles-configure.html)   - In order to use the simple login API, Admin MFA must be disabled or the API user must be excluded.     (https://sdphelp.appgate.com/adminguide/mfa-for-admins.html) # Base path   HTTPS requests must be sent to the Admin Interface hostname and port, with **_/admin** path.    For example: **https://appgate.company.com:8443/admin**    All requests must have the **Accept** header as:    **application/vnd.appgate.peer-v22+json**    An exception is made for the **_/admin/version** endpoint which instead expects an **application/json** Accept header. # API Conventions   API conventions are  important to understand and follow strictly.    - While updating objects (via PUT), entire object must be sent with all fields.     - For example, in order to add a remedy method to the condition below:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": []       }       ```     - send the entire object with updated and non-updated fields:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": [{\"type\": \"DisplayMessage\", \"message\": \"test message\"}]       }       ```    - In case Controller returns an error (non-2xx HTTP status code), response body is JSON.     The \"message\" field contains information about the error.     HTTP 422 \"Unprocessable Entity\" has extra `errors` field to list all the issues with specific fields.    - Empty string (\"\") is considered a different value than \"null\" or field being omitted from JSON.     Omitting the field is recommended if no value is intended.     Empty string (\"\") will be almost always rejected as invalid value.    - There are common pattern between many objects:     - **Configuration Objects**: There are many objects with common fields, namely \"id\", \"name\", \"notes\", \"created\"       and \"updated\". These entities are listed, queried, created, updated and deleted in a similar fashion.     - **Distinguished Name**: Users and Devices are identified with what is called Distinguished Names, as used in        LDAP. The distinguished format that identifies a device and a user combination is        \"CN=\\<Device ID\\>,CN=\\<username\\>,OU=\\<Identity Provider Name\\>\". Some objects have the        \"userDistinguishedName\" field, which does not include the CN for Device ID.        This identifies a user on every device.

API version: API version 22.1
Contact: appgatesdp.support@appgate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Coralogix struct for Coralogix
type Coralogix struct {
	// URL of the Coralogix collector to connect to.
	Url string `json:"url"`
	// Private key to use for authentication.
	PrivateKey string `json:"privateKey"`
	// UUID of the Coralogix collector to connect to.
	Uuid string `json:"uuid"`
	// Application name to use for the logs.
	ApplicationName string `json:"applicationName"`
	// Subsystem name to use for the logs.
	SubsystemName string `json:"subsystemName"`
}

// NewCoralogix instantiates a new Coralogix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoralogix(url string, privateKey string, uuid string, applicationName string, subsystemName string) *Coralogix {
	this := Coralogix{}
	this.Url = url
	this.PrivateKey = privateKey
	this.Uuid = uuid
	this.ApplicationName = applicationName
	this.SubsystemName = subsystemName
	return &this
}

// NewCoralogixWithDefaults instantiates a new Coralogix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoralogixWithDefaults() *Coralogix {
	this := Coralogix{}
	return &this
}

// GetUrl returns the Url field value
func (o *Coralogix) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Coralogix) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Coralogix) SetUrl(v string) {
	o.Url = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *Coralogix) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *Coralogix) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *Coralogix) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetUuid returns the Uuid field value
func (o *Coralogix) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Coralogix) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Coralogix) SetUuid(v string) {
	o.Uuid = v
}

// GetApplicationName returns the ApplicationName field value
func (o *Coralogix) GetApplicationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value
// and a boolean to check if the value has been set.
func (o *Coralogix) GetApplicationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationName, true
}

// SetApplicationName sets field value
func (o *Coralogix) SetApplicationName(v string) {
	o.ApplicationName = v
}

// GetSubsystemName returns the SubsystemName field value
func (o *Coralogix) GetSubsystemName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubsystemName
}

// GetSubsystemNameOk returns a tuple with the SubsystemName field value
// and a boolean to check if the value has been set.
func (o *Coralogix) GetSubsystemNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubsystemName, true
}

// SetSubsystemName sets field value
func (o *Coralogix) SetSubsystemName(v string) {
	o.SubsystemName = v
}

func (o Coralogix) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["privateKey"] = o.PrivateKey
	}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["applicationName"] = o.ApplicationName
	}
	if true {
		toSerialize["subsystemName"] = o.SubsystemName
	}
	return json.Marshal(toSerialize)
}

type NullableCoralogix struct {
	value *Coralogix
	isSet bool
}

func (v NullableCoralogix) Get() *Coralogix {
	return v.value
}

func (v *NullableCoralogix) Set(val *Coralogix) {
	v.value = val
	v.isSet = true
}

func (v NullableCoralogix) IsSet() bool {
	return v.isSet
}

func (v *NullableCoralogix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoralogix(val *Coralogix) *NullableCoralogix {
	return &NullableCoralogix{value: val, isSet: true}
}

func (v NullableCoralogix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoralogix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
