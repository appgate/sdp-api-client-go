/*
Appgate SDP Controller REST API

# About   This specification documents the REST API calls for the Appgate SDP Controller.    Please refer to the REST API chapter in the manual or contact Appgate support with any questions about   this functionality. # Getting Started   Requirements for API scripting:   - Access to the Admin/API TLS Connection (default port 8443) of a Controller appliance.     (https://sdphelp.appgate.com/adminguide/appliance-function-configure.html?anchor=admin-api)   - An API user with relevant permissions.     (https://sdphelp.appgate.com/adminguide/administrative-roles-configure.html)   - In order to use the simple login API, Admin MFA must be disabled or the API user must be excluded.     (https://sdphelp.appgate.com/adminguide/mfa-for-admins.html) # Base path   HTTPS requests must be sent to the Admin Interface hostname and port, with **_/admin** path.    For example: **https://appgate.company.com:8443/admin**    All requests must have the **Accept** header as:    **application/vnd.appgate.peer-v22+json**    An exception is made for the **_/admin/version** endpoint which instead expects an **application/json** Accept header. # API Conventions   API conventions are  important to understand and follow strictly.    - While updating objects (via PUT), entire object must be sent with all fields.     - For example, in order to add a remedy method to the condition below:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": []       }       ```     - send the entire object with updated and non-updated fields:       ```       {         \"id\": \"12699e27-b584-464a-81ee-5b4784b6d425\",         \"name\": \"Test\",         \"notes\": \"Making a point\",         \"tags\": [\"test\", \"tag\"],         \"expression\": \"return true;\",         \"remedyMethods\": [{\"type\": \"DisplayMessage\", \"message\": \"test message\"}]       }       ```    - In case Controller returns an error (non-2xx HTTP status code), response body is JSON.     The \"message\" field contains information about the error.     HTTP 422 \"Unprocessable Entity\" has extra `errors` field to list all the issues with specific fields.    - Empty string (\"\") is considered a different value than \"null\" or field being omitted from JSON.     Omitting the field is recommended if no value is intended.     Empty string (\"\") will be almost always rejected as invalid value.    - There are common pattern between many objects:     - **Configuration Objects**: There are many objects with common fields, namely \"id\", \"name\", \"notes\", \"created\"       and \"updated\". These entities are listed, queried, created, updated and deleted in a similar fashion.     - **Distinguished Name**: Users and Devices are identified with what is called Distinguished Names, as used in        LDAP. The distinguished format that identifies a device and a user combination is        \"CN=\\<Device ID\\>,CN=\\<username\\>,OU=\\<Identity Provider Name\\>\". Some objects have the        \"userDistinguishedName\" field, which does not include the CN for Device ID.        This identifies a user on every device.

API version: API version 22.1
Contact: appgatesdp.support@appgate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ApplianceWithStatus struct for ApplianceWithStatus
type ApplianceWithStatus struct {
	// ID of the object.
	Id *string `json:"id,omitempty"`
	// Name of the object.
	Name string `json:"name"`
	// Notes for the object. Used for documentation purposes.
	Notes *string `json:"notes,omitempty"`
	// Create date.
	Created *time.Time `json:"created,omitempty"`
	// Last update date.
	Updated *time.Time `json:"updated,omitempty"`
	// Array of tags.
	Tags []string `json:"tags,omitempty"`
	// Whether the Appliance is activated or not. If it is not activated, it won't be accessible by the Clients.
	Activated *bool `json:"activated,omitempty"`
	// Whether the Appliance is pending certificate renewal or not. Should be true for a very short period on certificate renewal.
	PendingCertificateRenewal *bool `json:"pendingCertificateRenewal,omitempty"`
	// Peer version of the Appliance.
	Version *int32 `json:"version,omitempty"`
	// Hostname of the Appliance. It's used by other Appliances to communicate with and identify this Appliances. Set it to \"automatic.hostname.assignment\" for cloud appliances in order for it to automatically configure the hostname on activation.
	Hostname string `json:"hostname"`
	// Site served by the Appliance. Entitlements on this Site will be included in the Entitlement Token for this Appliance. Not useful if Gateway role is not enabled.
	Site *string `json:"site,omitempty"`
	// Name of the Site for this Appliance. For convenience only.
	SiteName *string `json:"siteName,omitempty"`
	// Customization assigned to this Appliance.
	Customization      *string                          `json:"customization,omitempty"`
	ClientInterface    ApplianceAllOfClientInterface    `json:"clientInterface"`
	AdminInterface     *ApplianceAllOfAdminInterface    `json:"adminInterface,omitempty"`
	Networking         ApplianceAllOfNetworking         `json:"networking"`
	Ntp                *ApplianceAllOfNtp               `json:"ntp,omitempty"`
	SshServer          *ApplianceAllOfSshServer         `json:"sshServer,omitempty"`
	SnmpServer         *ApplianceAllOfSnmpServer        `json:"snmpServer,omitempty"`
	HealthcheckServer  *ApplianceAllOfHealthcheckServer `json:"healthcheckServer,omitempty"`
	PrometheusExporter *PrometheusExporter              `json:"prometheusExporter,omitempty"`
	Ping               *ApplianceAllOfPing              `json:"ping,omitempty"`
	LogServer          *ApplianceAllOfLogServer         `json:"logServer,omitempty"`
	Controller         *ApplianceAllOfController        `json:"controller,omitempty"`
	Gateway            *ApplianceAllOfGateway           `json:"gateway,omitempty"`
	LogForwarder       *ApplianceAllOfLogForwarder      `json:"logForwarder,omitempty"`
	MetricsAggregator  *ApplianceAllOfMetricsAggregator `json:"metricsAggregator,omitempty"`
	Connector          *ApplianceAllOfConnector         `json:"connector,omitempty"`
	Portal             *Portal                          `json:"portal,omitempty"`
	// Rsyslog destination settings to forward appliance logs.
	RsyslogDestinations []ApplianceAllOfRsyslogDestinations `json:"rsyslogDestinations,omitempty"`
	// Hostname aliases. They are added to the Appliance certificate as Subject Alternative Names so it is trusted using different IPs or hostnames. Requires manual certificate renewal to apply changes to the certificate.
	HostnameAliases []string `json:"hostnameAliases,omitempty"`
	// State of the Appliance. For internal use.
	State *string `json:"state,omitempty"`
	// Functions of the Appliance.
	Functions []ApplianceFunction `json:"functions,omitempty"`
	// Appliance Status.
	Status *string `json:"status,omitempty"`
	// The name of the customization applied to the Appliance.
	CustomizationName *string `json:"customizationName,omitempty"`
	// CPU utilization in percentage.
	Cpu *float32 `json:"cpu,omitempty"`
	// Memory utilization in percentage.
	Memory *float32 `json:"memory,omitempty"`
	// Disk utilization in percentage.
	Disk *float32 `json:"disk,omitempty"`
	// Number of sessions.
	NumberOfSessions *int32 `json:"numberOfSessions,omitempty"`
	// The Appliance build version.
	ApplianceVersion *string                          `json:"applianceVersion,omitempty"`
	Details          *ApplianceWithStatusAllOfDetails `json:"details,omitempty"`
}

// NewApplianceWithStatus instantiates a new ApplianceWithStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplianceWithStatus(name string, hostname string, clientInterface ApplianceAllOfClientInterface, networking ApplianceAllOfNetworking) *ApplianceWithStatus {
	this := ApplianceWithStatus{}
	this.Name = name
	this.Hostname = hostname
	this.ClientInterface = clientInterface
	this.Networking = networking
	return &this
}

// NewApplianceWithStatusWithDefaults instantiates a new ApplianceWithStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplianceWithStatusWithDefaults() *ApplianceWithStatus {
	this := ApplianceWithStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplianceWithStatus) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ApplianceWithStatus) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplianceWithStatus) SetName(v string) {
	o.Name = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetNotesOk() (*string, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *ApplianceWithStatus) SetNotes(v string) {
	o.Notes = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ApplianceWithStatus) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetUpdated() time.Time {
	if o == nil || o.Updated == nil {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *ApplianceWithStatus) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ApplianceWithStatus) SetTags(v []string) {
	o.Tags = v
}

// GetActivated returns the Activated field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetActivated() bool {
	if o == nil || o.Activated == nil {
		var ret bool
		return ret
	}
	return *o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetActivatedOk() (*bool, bool) {
	if o == nil || o.Activated == nil {
		return nil, false
	}
	return o.Activated, true
}

// HasActivated returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasActivated() bool {
	if o != nil && o.Activated != nil {
		return true
	}

	return false
}

// SetActivated gets a reference to the given bool and assigns it to the Activated field.
func (o *ApplianceWithStatus) SetActivated(v bool) {
	o.Activated = &v
}

// GetPendingCertificateRenewal returns the PendingCertificateRenewal field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetPendingCertificateRenewal() bool {
	if o == nil || o.PendingCertificateRenewal == nil {
		var ret bool
		return ret
	}
	return *o.PendingCertificateRenewal
}

// GetPendingCertificateRenewalOk returns a tuple with the PendingCertificateRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetPendingCertificateRenewalOk() (*bool, bool) {
	if o == nil || o.PendingCertificateRenewal == nil {
		return nil, false
	}
	return o.PendingCertificateRenewal, true
}

// HasPendingCertificateRenewal returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasPendingCertificateRenewal() bool {
	if o != nil && o.PendingCertificateRenewal != nil {
		return true
	}

	return false
}

// SetPendingCertificateRenewal gets a reference to the given bool and assigns it to the PendingCertificateRenewal field.
func (o *ApplianceWithStatus) SetPendingCertificateRenewal(v bool) {
	o.PendingCertificateRenewal = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetVersionOk() (*int32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *ApplianceWithStatus) SetVersion(v int32) {
	o.Version = &v
}

// GetHostname returns the Hostname field value
func (o *ApplianceWithStatus) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *ApplianceWithStatus) SetHostname(v string) {
	o.Hostname = v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetSite() string {
	if o == nil || o.Site == nil {
		var ret string
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetSiteOk() (*string, bool) {
	if o == nil || o.Site == nil {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasSite() bool {
	if o != nil && o.Site != nil {
		return true
	}

	return false
}

// SetSite gets a reference to the given string and assigns it to the Site field.
func (o *ApplianceWithStatus) SetSite(v string) {
	o.Site = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetSiteName() string {
	if o == nil || o.SiteName == nil {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetSiteNameOk() (*string, bool) {
	if o == nil || o.SiteName == nil {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasSiteName() bool {
	if o != nil && o.SiteName != nil {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *ApplianceWithStatus) SetSiteName(v string) {
	o.SiteName = &v
}

// GetCustomization returns the Customization field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetCustomization() string {
	if o == nil || o.Customization == nil {
		var ret string
		return ret
	}
	return *o.Customization
}

// GetCustomizationOk returns a tuple with the Customization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetCustomizationOk() (*string, bool) {
	if o == nil || o.Customization == nil {
		return nil, false
	}
	return o.Customization, true
}

// HasCustomization returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasCustomization() bool {
	if o != nil && o.Customization != nil {
		return true
	}

	return false
}

// SetCustomization gets a reference to the given string and assigns it to the Customization field.
func (o *ApplianceWithStatus) SetCustomization(v string) {
	o.Customization = &v
}

// GetClientInterface returns the ClientInterface field value
func (o *ApplianceWithStatus) GetClientInterface() ApplianceAllOfClientInterface {
	if o == nil {
		var ret ApplianceAllOfClientInterface
		return ret
	}

	return o.ClientInterface
}

// GetClientInterfaceOk returns a tuple with the ClientInterface field value
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetClientInterfaceOk() (*ApplianceAllOfClientInterface, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientInterface, true
}

// SetClientInterface sets field value
func (o *ApplianceWithStatus) SetClientInterface(v ApplianceAllOfClientInterface) {
	o.ClientInterface = v
}

// GetAdminInterface returns the AdminInterface field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetAdminInterface() ApplianceAllOfAdminInterface {
	if o == nil || o.AdminInterface == nil {
		var ret ApplianceAllOfAdminInterface
		return ret
	}
	return *o.AdminInterface
}

// GetAdminInterfaceOk returns a tuple with the AdminInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetAdminInterfaceOk() (*ApplianceAllOfAdminInterface, bool) {
	if o == nil || o.AdminInterface == nil {
		return nil, false
	}
	return o.AdminInterface, true
}

// HasAdminInterface returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasAdminInterface() bool {
	if o != nil && o.AdminInterface != nil {
		return true
	}

	return false
}

// SetAdminInterface gets a reference to the given ApplianceAllOfAdminInterface and assigns it to the AdminInterface field.
func (o *ApplianceWithStatus) SetAdminInterface(v ApplianceAllOfAdminInterface) {
	o.AdminInterface = &v
}

// GetNetworking returns the Networking field value
func (o *ApplianceWithStatus) GetNetworking() ApplianceAllOfNetworking {
	if o == nil {
		var ret ApplianceAllOfNetworking
		return ret
	}

	return o.Networking
}

// GetNetworkingOk returns a tuple with the Networking field value
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetNetworkingOk() (*ApplianceAllOfNetworking, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Networking, true
}

// SetNetworking sets field value
func (o *ApplianceWithStatus) SetNetworking(v ApplianceAllOfNetworking) {
	o.Networking = v
}

// GetNtp returns the Ntp field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetNtp() ApplianceAllOfNtp {
	if o == nil || o.Ntp == nil {
		var ret ApplianceAllOfNtp
		return ret
	}
	return *o.Ntp
}

// GetNtpOk returns a tuple with the Ntp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetNtpOk() (*ApplianceAllOfNtp, bool) {
	if o == nil || o.Ntp == nil {
		return nil, false
	}
	return o.Ntp, true
}

// HasNtp returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasNtp() bool {
	if o != nil && o.Ntp != nil {
		return true
	}

	return false
}

// SetNtp gets a reference to the given ApplianceAllOfNtp and assigns it to the Ntp field.
func (o *ApplianceWithStatus) SetNtp(v ApplianceAllOfNtp) {
	o.Ntp = &v
}

// GetSshServer returns the SshServer field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetSshServer() ApplianceAllOfSshServer {
	if o == nil || o.SshServer == nil {
		var ret ApplianceAllOfSshServer
		return ret
	}
	return *o.SshServer
}

// GetSshServerOk returns a tuple with the SshServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetSshServerOk() (*ApplianceAllOfSshServer, bool) {
	if o == nil || o.SshServer == nil {
		return nil, false
	}
	return o.SshServer, true
}

// HasSshServer returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasSshServer() bool {
	if o != nil && o.SshServer != nil {
		return true
	}

	return false
}

// SetSshServer gets a reference to the given ApplianceAllOfSshServer and assigns it to the SshServer field.
func (o *ApplianceWithStatus) SetSshServer(v ApplianceAllOfSshServer) {
	o.SshServer = &v
}

// GetSnmpServer returns the SnmpServer field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetSnmpServer() ApplianceAllOfSnmpServer {
	if o == nil || o.SnmpServer == nil {
		var ret ApplianceAllOfSnmpServer
		return ret
	}
	return *o.SnmpServer
}

// GetSnmpServerOk returns a tuple with the SnmpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetSnmpServerOk() (*ApplianceAllOfSnmpServer, bool) {
	if o == nil || o.SnmpServer == nil {
		return nil, false
	}
	return o.SnmpServer, true
}

// HasSnmpServer returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasSnmpServer() bool {
	if o != nil && o.SnmpServer != nil {
		return true
	}

	return false
}

// SetSnmpServer gets a reference to the given ApplianceAllOfSnmpServer and assigns it to the SnmpServer field.
func (o *ApplianceWithStatus) SetSnmpServer(v ApplianceAllOfSnmpServer) {
	o.SnmpServer = &v
}

// GetHealthcheckServer returns the HealthcheckServer field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetHealthcheckServer() ApplianceAllOfHealthcheckServer {
	if o == nil || o.HealthcheckServer == nil {
		var ret ApplianceAllOfHealthcheckServer
		return ret
	}
	return *o.HealthcheckServer
}

// GetHealthcheckServerOk returns a tuple with the HealthcheckServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetHealthcheckServerOk() (*ApplianceAllOfHealthcheckServer, bool) {
	if o == nil || o.HealthcheckServer == nil {
		return nil, false
	}
	return o.HealthcheckServer, true
}

// HasHealthcheckServer returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasHealthcheckServer() bool {
	if o != nil && o.HealthcheckServer != nil {
		return true
	}

	return false
}

// SetHealthcheckServer gets a reference to the given ApplianceAllOfHealthcheckServer and assigns it to the HealthcheckServer field.
func (o *ApplianceWithStatus) SetHealthcheckServer(v ApplianceAllOfHealthcheckServer) {
	o.HealthcheckServer = &v
}

// GetPrometheusExporter returns the PrometheusExporter field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetPrometheusExporter() PrometheusExporter {
	if o == nil || o.PrometheusExporter == nil {
		var ret PrometheusExporter
		return ret
	}
	return *o.PrometheusExporter
}

// GetPrometheusExporterOk returns a tuple with the PrometheusExporter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetPrometheusExporterOk() (*PrometheusExporter, bool) {
	if o == nil || o.PrometheusExporter == nil {
		return nil, false
	}
	return o.PrometheusExporter, true
}

// HasPrometheusExporter returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasPrometheusExporter() bool {
	if o != nil && o.PrometheusExporter != nil {
		return true
	}

	return false
}

// SetPrometheusExporter gets a reference to the given PrometheusExporter and assigns it to the PrometheusExporter field.
func (o *ApplianceWithStatus) SetPrometheusExporter(v PrometheusExporter) {
	o.PrometheusExporter = &v
}

// GetPing returns the Ping field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetPing() ApplianceAllOfPing {
	if o == nil || o.Ping == nil {
		var ret ApplianceAllOfPing
		return ret
	}
	return *o.Ping
}

// GetPingOk returns a tuple with the Ping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetPingOk() (*ApplianceAllOfPing, bool) {
	if o == nil || o.Ping == nil {
		return nil, false
	}
	return o.Ping, true
}

// HasPing returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasPing() bool {
	if o != nil && o.Ping != nil {
		return true
	}

	return false
}

// SetPing gets a reference to the given ApplianceAllOfPing and assigns it to the Ping field.
func (o *ApplianceWithStatus) SetPing(v ApplianceAllOfPing) {
	o.Ping = &v
}

// GetLogServer returns the LogServer field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetLogServer() ApplianceAllOfLogServer {
	if o == nil || o.LogServer == nil {
		var ret ApplianceAllOfLogServer
		return ret
	}
	return *o.LogServer
}

// GetLogServerOk returns a tuple with the LogServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetLogServerOk() (*ApplianceAllOfLogServer, bool) {
	if o == nil || o.LogServer == nil {
		return nil, false
	}
	return o.LogServer, true
}

// HasLogServer returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasLogServer() bool {
	if o != nil && o.LogServer != nil {
		return true
	}

	return false
}

// SetLogServer gets a reference to the given ApplianceAllOfLogServer and assigns it to the LogServer field.
func (o *ApplianceWithStatus) SetLogServer(v ApplianceAllOfLogServer) {
	o.LogServer = &v
}

// GetController returns the Controller field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetController() ApplianceAllOfController {
	if o == nil || o.Controller == nil {
		var ret ApplianceAllOfController
		return ret
	}
	return *o.Controller
}

// GetControllerOk returns a tuple with the Controller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetControllerOk() (*ApplianceAllOfController, bool) {
	if o == nil || o.Controller == nil {
		return nil, false
	}
	return o.Controller, true
}

// HasController returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasController() bool {
	if o != nil && o.Controller != nil {
		return true
	}

	return false
}

// SetController gets a reference to the given ApplianceAllOfController and assigns it to the Controller field.
func (o *ApplianceWithStatus) SetController(v ApplianceAllOfController) {
	o.Controller = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetGateway() ApplianceAllOfGateway {
	if o == nil || o.Gateway == nil {
		var ret ApplianceAllOfGateway
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetGatewayOk() (*ApplianceAllOfGateway, bool) {
	if o == nil || o.Gateway == nil {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasGateway() bool {
	if o != nil && o.Gateway != nil {
		return true
	}

	return false
}

// SetGateway gets a reference to the given ApplianceAllOfGateway and assigns it to the Gateway field.
func (o *ApplianceWithStatus) SetGateway(v ApplianceAllOfGateway) {
	o.Gateway = &v
}

// GetLogForwarder returns the LogForwarder field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetLogForwarder() ApplianceAllOfLogForwarder {
	if o == nil || o.LogForwarder == nil {
		var ret ApplianceAllOfLogForwarder
		return ret
	}
	return *o.LogForwarder
}

// GetLogForwarderOk returns a tuple with the LogForwarder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetLogForwarderOk() (*ApplianceAllOfLogForwarder, bool) {
	if o == nil || o.LogForwarder == nil {
		return nil, false
	}
	return o.LogForwarder, true
}

// HasLogForwarder returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasLogForwarder() bool {
	if o != nil && o.LogForwarder != nil {
		return true
	}

	return false
}

// SetLogForwarder gets a reference to the given ApplianceAllOfLogForwarder and assigns it to the LogForwarder field.
func (o *ApplianceWithStatus) SetLogForwarder(v ApplianceAllOfLogForwarder) {
	o.LogForwarder = &v
}

// GetMetricsAggregator returns the MetricsAggregator field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetMetricsAggregator() ApplianceAllOfMetricsAggregator {
	if o == nil || o.MetricsAggregator == nil {
		var ret ApplianceAllOfMetricsAggregator
		return ret
	}
	return *o.MetricsAggregator
}

// GetMetricsAggregatorOk returns a tuple with the MetricsAggregator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetMetricsAggregatorOk() (*ApplianceAllOfMetricsAggregator, bool) {
	if o == nil || o.MetricsAggregator == nil {
		return nil, false
	}
	return o.MetricsAggregator, true
}

// HasMetricsAggregator returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasMetricsAggregator() bool {
	if o != nil && o.MetricsAggregator != nil {
		return true
	}

	return false
}

// SetMetricsAggregator gets a reference to the given ApplianceAllOfMetricsAggregator and assigns it to the MetricsAggregator field.
func (o *ApplianceWithStatus) SetMetricsAggregator(v ApplianceAllOfMetricsAggregator) {
	o.MetricsAggregator = &v
}

// GetConnector returns the Connector field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetConnector() ApplianceAllOfConnector {
	if o == nil || o.Connector == nil {
		var ret ApplianceAllOfConnector
		return ret
	}
	return *o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetConnectorOk() (*ApplianceAllOfConnector, bool) {
	if o == nil || o.Connector == nil {
		return nil, false
	}
	return o.Connector, true
}

// HasConnector returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasConnector() bool {
	if o != nil && o.Connector != nil {
		return true
	}

	return false
}

// SetConnector gets a reference to the given ApplianceAllOfConnector and assigns it to the Connector field.
func (o *ApplianceWithStatus) SetConnector(v ApplianceAllOfConnector) {
	o.Connector = &v
}

// GetPortal returns the Portal field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetPortal() Portal {
	if o == nil || o.Portal == nil {
		var ret Portal
		return ret
	}
	return *o.Portal
}

// GetPortalOk returns a tuple with the Portal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetPortalOk() (*Portal, bool) {
	if o == nil || o.Portal == nil {
		return nil, false
	}
	return o.Portal, true
}

// HasPortal returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasPortal() bool {
	if o != nil && o.Portal != nil {
		return true
	}

	return false
}

// SetPortal gets a reference to the given Portal and assigns it to the Portal field.
func (o *ApplianceWithStatus) SetPortal(v Portal) {
	o.Portal = &v
}

// GetRsyslogDestinations returns the RsyslogDestinations field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetRsyslogDestinations() []ApplianceAllOfRsyslogDestinations {
	if o == nil || o.RsyslogDestinations == nil {
		var ret []ApplianceAllOfRsyslogDestinations
		return ret
	}
	return o.RsyslogDestinations
}

// GetRsyslogDestinationsOk returns a tuple with the RsyslogDestinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetRsyslogDestinationsOk() ([]ApplianceAllOfRsyslogDestinations, bool) {
	if o == nil || o.RsyslogDestinations == nil {
		return nil, false
	}
	return o.RsyslogDestinations, true
}

// HasRsyslogDestinations returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasRsyslogDestinations() bool {
	if o != nil && o.RsyslogDestinations != nil {
		return true
	}

	return false
}

// SetRsyslogDestinations gets a reference to the given []ApplianceAllOfRsyslogDestinations and assigns it to the RsyslogDestinations field.
func (o *ApplianceWithStatus) SetRsyslogDestinations(v []ApplianceAllOfRsyslogDestinations) {
	o.RsyslogDestinations = v
}

// GetHostnameAliases returns the HostnameAliases field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetHostnameAliases() []string {
	if o == nil || o.HostnameAliases == nil {
		var ret []string
		return ret
	}
	return o.HostnameAliases
}

// GetHostnameAliasesOk returns a tuple with the HostnameAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetHostnameAliasesOk() ([]string, bool) {
	if o == nil || o.HostnameAliases == nil {
		return nil, false
	}
	return o.HostnameAliases, true
}

// HasHostnameAliases returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasHostnameAliases() bool {
	if o != nil && o.HostnameAliases != nil {
		return true
	}

	return false
}

// SetHostnameAliases gets a reference to the given []string and assigns it to the HostnameAliases field.
func (o *ApplianceWithStatus) SetHostnameAliases(v []string) {
	o.HostnameAliases = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ApplianceWithStatus) SetState(v string) {
	o.State = &v
}

// GetFunctions returns the Functions field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetFunctions() []ApplianceFunction {
	if o == nil || o.Functions == nil {
		var ret []ApplianceFunction
		return ret
	}
	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetFunctionsOk() ([]ApplianceFunction, bool) {
	if o == nil || o.Functions == nil {
		return nil, false
	}
	return o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasFunctions() bool {
	if o != nil && o.Functions != nil {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given []ApplianceFunction and assigns it to the Functions field.
func (o *ApplianceWithStatus) SetFunctions(v []ApplianceFunction) {
	o.Functions = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ApplianceWithStatus) SetStatus(v string) {
	o.Status = &v
}

// GetCustomizationName returns the CustomizationName field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetCustomizationName() string {
	if o == nil || o.CustomizationName == nil {
		var ret string
		return ret
	}
	return *o.CustomizationName
}

// GetCustomizationNameOk returns a tuple with the CustomizationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetCustomizationNameOk() (*string, bool) {
	if o == nil || o.CustomizationName == nil {
		return nil, false
	}
	return o.CustomizationName, true
}

// HasCustomizationName returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasCustomizationName() bool {
	if o != nil && o.CustomizationName != nil {
		return true
	}

	return false
}

// SetCustomizationName gets a reference to the given string and assigns it to the CustomizationName field.
func (o *ApplianceWithStatus) SetCustomizationName(v string) {
	o.CustomizationName = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetCpu() float32 {
	if o == nil || o.Cpu == nil {
		var ret float32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetCpuOk() (*float32, bool) {
	if o == nil || o.Cpu == nil {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasCpu() bool {
	if o != nil && o.Cpu != nil {
		return true
	}

	return false
}

// SetCpu gets a reference to the given float32 and assigns it to the Cpu field.
func (o *ApplianceWithStatus) SetCpu(v float32) {
	o.Cpu = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetMemory() float32 {
	if o == nil || o.Memory == nil {
		var ret float32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetMemoryOk() (*float32, bool) {
	if o == nil || o.Memory == nil {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasMemory() bool {
	if o != nil && o.Memory != nil {
		return true
	}

	return false
}

// SetMemory gets a reference to the given float32 and assigns it to the Memory field.
func (o *ApplianceWithStatus) SetMemory(v float32) {
	o.Memory = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetDisk() float32 {
	if o == nil || o.Disk == nil {
		var ret float32
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetDiskOk() (*float32, bool) {
	if o == nil || o.Disk == nil {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasDisk() bool {
	if o != nil && o.Disk != nil {
		return true
	}

	return false
}

// SetDisk gets a reference to the given float32 and assigns it to the Disk field.
func (o *ApplianceWithStatus) SetDisk(v float32) {
	o.Disk = &v
}

// GetNumberOfSessions returns the NumberOfSessions field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetNumberOfSessions() int32 {
	if o == nil || o.NumberOfSessions == nil {
		var ret int32
		return ret
	}
	return *o.NumberOfSessions
}

// GetNumberOfSessionsOk returns a tuple with the NumberOfSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetNumberOfSessionsOk() (*int32, bool) {
	if o == nil || o.NumberOfSessions == nil {
		return nil, false
	}
	return o.NumberOfSessions, true
}

// HasNumberOfSessions returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasNumberOfSessions() bool {
	if o != nil && o.NumberOfSessions != nil {
		return true
	}

	return false
}

// SetNumberOfSessions gets a reference to the given int32 and assigns it to the NumberOfSessions field.
func (o *ApplianceWithStatus) SetNumberOfSessions(v int32) {
	o.NumberOfSessions = &v
}

// GetApplianceVersion returns the ApplianceVersion field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetApplianceVersion() string {
	if o == nil || o.ApplianceVersion == nil {
		var ret string
		return ret
	}
	return *o.ApplianceVersion
}

// GetApplianceVersionOk returns a tuple with the ApplianceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetApplianceVersionOk() (*string, bool) {
	if o == nil || o.ApplianceVersion == nil {
		return nil, false
	}
	return o.ApplianceVersion, true
}

// HasApplianceVersion returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasApplianceVersion() bool {
	if o != nil && o.ApplianceVersion != nil {
		return true
	}

	return false
}

// SetApplianceVersion gets a reference to the given string and assigns it to the ApplianceVersion field.
func (o *ApplianceWithStatus) SetApplianceVersion(v string) {
	o.ApplianceVersion = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ApplianceWithStatus) GetDetails() ApplianceWithStatusAllOfDetails {
	if o == nil || o.Details == nil {
		var ret ApplianceWithStatusAllOfDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplianceWithStatus) GetDetailsOk() (*ApplianceWithStatusAllOfDetails, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ApplianceWithStatus) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given ApplianceWithStatusAllOfDetails and assigns it to the Details field.
func (o *ApplianceWithStatus) SetDetails(v ApplianceWithStatusAllOfDetails) {
	o.Details = &v
}

func (o ApplianceWithStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Activated != nil {
		toSerialize["activated"] = o.Activated
	}
	if o.PendingCertificateRenewal != nil {
		toSerialize["pendingCertificateRenewal"] = o.PendingCertificateRenewal
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Site != nil {
		toSerialize["site"] = o.Site
	}
	if o.SiteName != nil {
		toSerialize["siteName"] = o.SiteName
	}
	if o.Customization != nil {
		toSerialize["customization"] = o.Customization
	}
	if true {
		toSerialize["clientInterface"] = o.ClientInterface
	}
	if o.AdminInterface != nil {
		toSerialize["adminInterface"] = o.AdminInterface
	}
	if true {
		toSerialize["networking"] = o.Networking
	}
	if o.Ntp != nil {
		toSerialize["ntp"] = o.Ntp
	}
	if o.SshServer != nil {
		toSerialize["sshServer"] = o.SshServer
	}
	if o.SnmpServer != nil {
		toSerialize["snmpServer"] = o.SnmpServer
	}
	if o.HealthcheckServer != nil {
		toSerialize["healthcheckServer"] = o.HealthcheckServer
	}
	if o.PrometheusExporter != nil {
		toSerialize["prometheusExporter"] = o.PrometheusExporter
	}
	if o.Ping != nil {
		toSerialize["ping"] = o.Ping
	}
	if o.LogServer != nil {
		toSerialize["logServer"] = o.LogServer
	}
	if o.Controller != nil {
		toSerialize["controller"] = o.Controller
	}
	if o.Gateway != nil {
		toSerialize["gateway"] = o.Gateway
	}
	if o.LogForwarder != nil {
		toSerialize["logForwarder"] = o.LogForwarder
	}
	if o.MetricsAggregator != nil {
		toSerialize["metricsAggregator"] = o.MetricsAggregator
	}
	if o.Connector != nil {
		toSerialize["connector"] = o.Connector
	}
	if o.Portal != nil {
		toSerialize["portal"] = o.Portal
	}
	if o.RsyslogDestinations != nil {
		toSerialize["rsyslogDestinations"] = o.RsyslogDestinations
	}
	if o.HostnameAliases != nil {
		toSerialize["hostnameAliases"] = o.HostnameAliases
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Functions != nil {
		toSerialize["functions"] = o.Functions
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.CustomizationName != nil {
		toSerialize["customizationName"] = o.CustomizationName
	}
	if o.Cpu != nil {
		toSerialize["cpu"] = o.Cpu
	}
	if o.Memory != nil {
		toSerialize["memory"] = o.Memory
	}
	if o.Disk != nil {
		toSerialize["disk"] = o.Disk
	}
	if o.NumberOfSessions != nil {
		toSerialize["numberOfSessions"] = o.NumberOfSessions
	}
	if o.ApplianceVersion != nil {
		toSerialize["applianceVersion"] = o.ApplianceVersion
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	return json.Marshal(toSerialize)
}

type NullableApplianceWithStatus struct {
	value *ApplianceWithStatus
	isSet bool
}

func (v NullableApplianceWithStatus) Get() *ApplianceWithStatus {
	return v.value
}

func (v *NullableApplianceWithStatus) Set(val *ApplianceWithStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableApplianceWithStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableApplianceWithStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplianceWithStatus(val *ApplianceWithStatus) *NullableApplianceWithStatus {
	return &NullableApplianceWithStatus{value: val, isSet: true}
}

func (v NullableApplianceWithStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplianceWithStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
